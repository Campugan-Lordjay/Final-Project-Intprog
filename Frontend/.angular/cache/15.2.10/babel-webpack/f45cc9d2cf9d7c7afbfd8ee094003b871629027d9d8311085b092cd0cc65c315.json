{"ast":null,"code":"import { HttpResponse, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { of, throwError } from 'rxjs';\nimport { delay, materialize, dematerialize } from 'rxjs/operators';\nimport { Role } from '@app/_models';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@app/_services\";\n// array in local storage for accounts\nconst accountsKey = 'angular-10-signup-verification-boilerplate-accounts';\nlet accounts = JSON.parse(localStorage.getItem(accountsKey)) || [];\n// array in local storage for requests\nconst requestsKey = 'angular-10-signup-verification-boilerplate-requests';\nlet requests = JSON.parse(localStorage.getItem(requestsKey)) || [];\n// array in local storage for employees\nconst employeesKey = 'angular-10-signup-verification-boilerplate-employees';\nlet employees = JSON.parse(localStorage.getItem(employeesKey)) || [];\n// array in local storage for departments\nconst departmentsKey = 'angular-10-signup-verification-boilerplate-departments';\nlet departments = JSON.parse(localStorage.getItem(departmentsKey)) || [];\nexport let FakeBackendInterceptor = /*#__PURE__*/(() => {\n  class FakeBackendInterceptor {\n    alertService;\n    constructor(alertService) {\n      this.alertService = alertService;\n    }\n    intercept(request, next) {\n      const {\n        url,\n        method,\n        headers,\n        body\n      } = request;\n      const alertService = this.alertService;\n      return handleRoute();\n      function handleRoute() {\n        switch (true) {\n          case url.endsWith('/accounts/authenticate') && method === 'POST':\n            return authenticate();\n          case url.endsWith('/accounts/refresh-token') && method === 'POST':\n            return refreshToken();\n          case url.endsWith('/accounts/revoke-token') && method === 'POST':\n            return revokeToken();\n          case url.endsWith('/accounts/register') && method === 'POST':\n            return register();\n          case url.endsWith('/accounts/verify-email') && method === 'POST':\n            return verifyEmail();\n          case url.endsWith('/accounts/forgot-password') && method === 'POST':\n            return forgotPassword();\n          case url.endsWith('/accounts/validate-reset-token') && method === 'POST':\n            return validateResetToken();\n          case url.endsWith('/accounts/reset-password') && method === 'POST':\n            return resetPassword();\n          case url.endsWith('/accounts') && method === 'GET':\n            return getAccounts();\n          case url.match(/\\/accounts\\/\\d+$/) && method === 'GET':\n            return getAccountById();\n          case url.endsWith('/accounts') && method === 'POST':\n            return createAccount();\n          case url.match(/\\/accounts\\/\\d+$/) && method === 'PUT':\n            return updateAccount();\n          case url.endsWith('/accounts/deactivate') && method === 'PUT':\n            return deactivateAccount();\n          case url.endsWith('/accounts/activate') && method === 'PUT':\n            return activateAccount();\n          case url.endsWith('/requests') && method === 'GET':\n            return getRequests();\n          case url.match(/\\/requests\\/\\d+$/) && method === 'GET':\n            return getRequestById();\n          case url.endsWith('/requests') && method === 'POST':\n            return createRequest();\n          case url.match(/\\/requests\\/\\d+$/) && method === 'PUT':\n            return updateRequest();\n          case url.match(/\\/requests\\/\\d+$/) && method === 'DELETE':\n            return deleteRequest();\n          case url.match(/\\/requests\\/\\d+\\/approve$/) && method === 'PUT':\n            return approveRequest();\n          case url.match(/\\/requests\\/\\d+\\/reject$/) && method === 'PUT':\n            return rejectRequest();\n          case url.endsWith('/employees') && method === 'GET':\n            return getEmployees();\n          case url.match(/\\/employees\\/\\w+$/) && method === 'GET':\n            return getEmployeeById();\n          case url.endsWith('/employees') && method === 'POST':\n            return createEmployee();\n          case url.match(/\\/employees\\/\\w+$/) && method === 'PUT':\n            return updateEmployee();\n          case url.match(/\\/employees\\/\\w+$/) && method === 'DELETE':\n            return deleteEmployee();\n          case url.endsWith('/departments') && method === 'GET':\n            return getDepartments();\n          case url.match(/\\/departments\\/[^/]+$/) && method === 'GET':\n            return getDepartmentById();\n          case url.endsWith('/departments') && method === 'POST':\n            return createDepartment();\n          case url.match(/\\/departments\\/[^/]+$/) && method === 'PUT':\n            return updateDepartment();\n          case url.match(/\\/departments\\/[^/]+$/) && method === 'DELETE':\n            return deleteDepartment();\n          default:\n            // pass through any requests not handled above\n            return next.handle(request);\n        }\n      }\n      // route functions\n      function authenticate() {\n        const {\n          email,\n          password\n        } = body;\n        const account = accounts.find(x => x.email === email && x.password === password);\n        if (!account) return error('Email or password is incorrect');\n        if (!account.isActive) return error('Account is deactivated');\n        // add refresh token to account\n        account.refreshTokens.push(generateRefreshToken());\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok({\n          ...basicDetails(account),\n          jwtToken: generateJwtToken(account)\n        });\n      }\n      //deactivate account\n      function deactivateAccount() {\n        const {\n          id\n        } = body; // Extract the account ID from the request body\n        const account = accounts.find(x => x.id === id); // Find the account by ID\n        if (account) {\n          if (!account.isActive) {\n            return error('Account is already deactivated'); // Prevent redundant deactivation\n          }\n\n          account.isActive = false; // Set the account as deactivated\n          localStorage.setItem(accountsKey, JSON.stringify(accounts)); // Save changes to localStorage\n          return ok({\n            message: 'Account deactivated successfully'\n          }); // Return success response\n        } else {\n          return error('Account not found'); // Return error if account doesn't exist\n        }\n      }\n\n      function activateAccount() {\n        const {\n          id\n        } = body; // Extract the account ID from the request body\n        const account = accounts.find(x => x.id === id); // Find the account by ID\n        if (account) {\n          if (account.isActive) {\n            return error('Account is already active'); // Prevent redundant activation\n          }\n\n          account.isActive = true; // Set the account as active\n          localStorage.setItem(accountsKey, JSON.stringify(accounts)); // Save changes to localStorage\n          return ok({\n            message: 'Account activated successfully'\n          }); // Return success response\n        } else {\n          return error('Account not found'); // Return error if account doesn't exist\n        }\n      }\n\n      function refreshToken() {\n        const refreshToken = getRefreshToken();\n        if (!refreshToken) return unauthorized();\n        const account = accounts.find(x => x.refreshTokens.includes(refreshToken));\n        if (!account) return unauthorized();\n        // replace old refresh token with a new one and save\n        account.refreshTokens = account.refreshTokens.filter(x => x !== refreshToken);\n        account.refreshTokens.push(generateRefreshToken());\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok({\n          ...basicDetails(account),\n          jwtToken: generateJwtToken(account)\n        });\n      }\n      function revokeToken() {\n        if (!isAuthenticated()) return unauthorized();\n        const refreshToken = getRefreshToken();\n        const account = accounts.find(x => x.refreshTokens.includes(refreshToken));\n        // revoke token and save\n        account.refreshTokens = account.refreshTokens.filter(x => x !== refreshToken);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok();\n      }\n      function register() {\n        const account = body;\n        if (accounts.find(x => x.email === account.email)) {\n          // display email already registered \"email\" in alert\n          setTimeout(() => {\n            alertService.info(`<h4>Email Already Registered</h4>\n                        <p>Your email ${account.email} is already registered.</p>\n                        <p>If you don't know your password please visit the <a href=\"${location.origin}/account/forgot-password\">forgot password</a> page.</p>\n                        <div><strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an api. A real backend would send a real email.</div>`, {\n              autoClose: false\n            });\n          }, 1000);\n          // always return ok() response to prevent email enumeration\n          return ok();\n        }\n        // assign account id and a few other properties then save\n        account.id = newAccountId();\n        if (account.id === 1) {\n          // first registered account is an admin\n          account.role = Role.Admin;\n        } else {\n          account.role = Role.User;\n        }\n        account.dateCreated = new Date().toISOString();\n        account.verificationToken = new Date().getTime().toString();\n        account.isVerified = true;\n        account.isActive = true; // New property added to ensure account is active by default\n        account.refreshTokens = [];\n        delete account.confirmPassword;\n        accounts.push(account);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        // display verification email in alert\n        setTimeout(() => {\n          const verifyUrl = `${location.origin}/account/verify-email?token=${account.verificationToken}`;\n          alertService.info(`\n                    <h4>Verification Email</h4>\n                    <p>Thanks for registering!</p>\n                    <p>Please click the below link to verify your email address:</p>\n                    <p><a href=\"${verifyUrl}\">${verifyUrl}</a></p>\n                    <div><strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an api. A real backend would send a real email.</div>\n                `, {\n            autoClose: false\n          });\n        }, 1000);\n        return ok();\n      }\n      function verifyEmail() {\n        const {\n          token\n        } = body;\n        const account = accounts.find(x => x.verificationToken && x.verificationToken === token);\n        if (!account) return error('Verification failed');\n        // set is verified flag to true if token is valid\n        account.isVerified = true;\n        delete account.verificationToken; // Remove the token after verification\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok();\n      }\n      function forgotPassword() {\n        const {\n          email\n        } = body;\n        const account = accounts.find(x => x.email === email);\n        // always return ok() response to prevent email enumeration\n        if (!account) return ok();\n        // create reset token that expires after 24 hours\n        account.resetToken = new Date().getTime().toString();\n        account.resetTokenExpires = new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString();\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        // display password reset email in alert\n        setTimeout(() => {\n          const resetUrl = `${location.origin}/account/reset-password?token=${account.resetToken}`;\n          alertService.info(`<h4>Reset Password Email</h4>\n                    <p>Please click the below link to reset your password, the link will be valid for 1 day:</p>\n                    <p><a href=\"${resetUrl}\">${resetUrl}</a></p>\n                    <div><strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an api. A real backend would send a real email.</div>`, {\n            autoClose: false\n          });\n        }, 1000);\n        return ok();\n      }\n      function validateResetToken() {\n        const {\n          token\n        } = body;\n        const account = accounts.find(x => !!x.resetToken === token && x.resetToken === token && new Date() < new Date(x.resetTokenExpires));\n        if (!account) return error('Invalid token');\n        return ok();\n      }\n      function resetPassword() {\n        const {\n          token,\n          password\n        } = body;\n        const account = accounts.find(x => !!x.resetToken && x.resetToken === token && new Date() < new Date(x.resetTokenExpires));\n        if (!account) return error('Invalid token');\n        // update password and remove reset token\n        account.password = password;\n        account.isVerified = true;\n        delete account.resetToken;\n        delete account.resetTokenExpires;\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok();\n      }\n      function getAccounts() {\n        if (!isAuthenticated()) return unauthorized();\n        return ok(accounts.map(x => basicDetails(x)));\n      }\n      function getAccountById() {\n        if (!isAuthenticated()) return unauthorized();\n        let account = accounts.find(x => x.id === idFromUrl());\n        // user accounts can get own profile and admin accounts can get all profiles\n        if (account.id !== currentAccount().id && !isAuthorized(Role.Admin)) {\n          return unauthorized();\n        }\n        return ok(basicDetails(account));\n      }\n      function createAccount() {\n        if (!isAuthorized(Role.Admin)) return unauthorized();\n        const account = body;\n        if (accounts.find(x => x.email === account.email)) {\n          return error(`Email ${account.email} is already registered`);\n        }\n        // assign account id and a few other properties then save\n        account.id = newAccountId();\n        if (account.id === 1) {\n          // first registered account is an admin\n          account.role = Role.Admin;\n        } else {\n          account.role = Role.User;\n        }\n        account.dateCreated = new Date().toISOString();\n        account.isVerified = true;\n        account.refreshTokens = [];\n        delete account.confirmPassword;\n        accounts.push(account);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok();\n      }\n      function updateAccount() {\n        if (!isAuthenticated()) return unauthorized();\n        let params = body;\n        let account = accounts.find(x => x.id === idFromUrl());\n        // user accounts can update own profile and admin accounts can update all profiles\n        if (account.id !== currentAccount().id && !isAuthorized(Role.Admin)) {\n          return unauthorized();\n        }\n        // only update password if included\n        if (!params.password) {\n          delete params.password;\n        }\n        // don't save confirm password\n        delete params.confirmPassword;\n        // update and save account\n        Object.assign(account, params);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok(basicDetails(account));\n      }\n      // function deleteAccount() {\n      //     if (!isAuthenticated()) return unauthorized();\n      //     let account = accounts.find(x => x.id === idFromUrl());\n      //     // user accounts can delete own account and admin accounts can delete any account\n      //     if (account.id !== currentAccount().id && !isAuthorized(Role.Admin)) {\n      //         return unauthorized();\n      //     }\n      //     // delete account then save\n      //     accounts = accounts.filter(x => x.id !== idFromUrl());\n      //     localStorage.setItem(accountsKey, JSON.stringify(accounts));\n      //     return ok();\n      // }\n      // request functions\n      function getRequests() {\n        if (!isAuthenticated()) return unauthorized();\n        return ok(requests);\n      }\n      function getRequestById() {\n        if (!isAuthenticated()) return unauthorized();\n        const request = requests.find(x => x.id === idFromUrl());\n        return ok(request);\n      }\n      function createRequest() {\n        if (!isAuthenticated()) return unauthorized();\n        const request = body;\n        request.id = newRequestId();\n        request.status = 'pending';\n        request.createdAt = new Date().toISOString();\n        request.updatedAt = new Date().toISOString();\n        request.userId = currentAccount().id;\n        request.userName = currentAccount().firstName + ' ' + currentAccount().lastName;\n        requests.push(request);\n        localStorage.setItem(requestsKey, JSON.stringify(requests));\n        return ok(request);\n      }\n      function updateRequest() {\n        if (!isAuthenticated()) return unauthorized();\n        const request = requests.find(x => x.id === idFromUrl());\n        if (!request) return error('Request not found');\n        // only allow updating title and description\n        request.title = body.title;\n        request.description = body.description;\n        request.updatedAt = new Date().toISOString();\n        localStorage.setItem(requestsKey, JSON.stringify(requests));\n        return ok(request);\n      }\n      function deleteRequest() {\n        if (!isAuthenticated()) return unauthorized();\n        if (!isAuthorized(Role.Admin)) return unauthorized();\n        requests = requests.filter(x => x.id !== idFromUrl());\n        localStorage.setItem(requestsKey, JSON.stringify(requests));\n        return ok();\n      }\n      function approveRequest() {\n        if (!isAuthenticated()) return unauthorized();\n        if (!isAuthorized(Role.Admin)) return unauthorized();\n        const request = requests.find(x => x.id === idFromUrl());\n        if (!request) return error('Request not found');\n        if (request.status === 'approved') {\n          return error('Request is already approved');\n        }\n        request.status = 'approved';\n        request.updatedAt = new Date().toISOString();\n        localStorage.setItem(requestsKey, JSON.stringify(requests));\n        return ok(request);\n      }\n      function rejectRequest() {\n        if (!isAuthenticated()) return unauthorized();\n        if (!isAuthorized(Role.Admin)) return unauthorized();\n        const request = requests.find(x => x.id === idFromUrl());\n        if (!request) return error('Request not found');\n        if (request.status === 'rejected') {\n          return error('Request is already rejected');\n        }\n        request.status = 'rejected';\n        request.updatedAt = new Date().toISOString();\n        localStorage.setItem(requestsKey, JSON.stringify(requests));\n        return ok(request);\n      }\n      function newRequestId() {\n        return requests.length ? Math.max(...requests.map(x => x.id)) + 1 : 1;\n      }\n      // Employee functions\n      function getEmployees() {\n        if (!isAuthenticated()) return unauthorized();\n        return ok(employees.map(mapEmployeeToFrontend));\n      }\n      function getEmployeeById() {\n        if (!isAuthenticated()) return unauthorized();\n        const employee = employees.find(x => x.id == idFromUrl());\n        return ok(mapEmployeeToFrontend(employee));\n      }\n      function createEmployee() {\n        if (!isAuthenticated()) return unauthorized();\n        const employee = body;\n        // Find account by email or id\n        const account = accounts.find(x => x.email === employee.account || x.id === employee.accountId);\n        if (!account) {\n          return error('Account does not exist. Please create an account first.');\n        }\n        // Check for duplicate employeeId\n        if (employees.some(e => e.employeeId === employee.employeeId)) {\n          return error('Employee ID already exists.');\n        }\n        employee.id = newEmployeeId();\n        employee.accountId = account.id; // Store the relationship\n        employee.account = account.email; // For display\n        employee.isActive = employee.status === 'Active';\n        employees.push(employee);\n        localStorage.setItem(employeesKey, JSON.stringify(employees));\n        return ok(mapEmployeeToFrontend(employee));\n      }\n      function updateEmployee() {\n        if (!isAuthenticated()) return unauthorized();\n        const employee = employees.find(x => x.id == idFromUrl());\n        if (!employee) return error('Employee not found');\n        Object.assign(employee, body);\n        employee.isActive = employee.status === 'Active';\n        localStorage.setItem(employeesKey, JSON.stringify(employees));\n        return ok(mapEmployeeToFrontend(employee));\n      }\n      function deleteEmployee() {\n        if (!isAuthenticated()) return unauthorized();\n        employees = employees.filter(x => x.id != idFromUrl());\n        localStorage.setItem(employeesKey, JSON.stringify(employees));\n        return ok();\n      }\n      function newEmployeeId() {\n        return (Date.now() + Math.random()).toString();\n      }\n      function mapEmployeeToFrontend(employee) {\n        if (!employee) return employee;\n        return {\n          ...employee,\n          status: employee.isActive ? 'Active' : 'Inactive'\n        };\n      }\n      // Department functions\n      function getDepartments() {\n        if (!isAuthenticated()) return unauthorized();\n        return ok(departments);\n      }\n      function getDepartmentById() {\n        if (!isAuthenticated()) return unauthorized();\n        const department = departments.find(x => x.id == idFromUrl());\n        return ok(department);\n      }\n      function createDepartment() {\n        if (!isAuthenticated()) return unauthorized();\n        const department = body;\n        department.id = newDepartmentId();\n        departments.push(department);\n        localStorage.setItem(departmentsKey, JSON.stringify(departments));\n        return ok(department);\n      }\n      function updateDepartment() {\n        if (!isAuthenticated()) return unauthorized();\n        const department = departments.find(x => x.id == idFromUrl());\n        if (!department) return error('Department not found');\n        Object.assign(department, body);\n        localStorage.setItem(departmentsKey, JSON.stringify(departments));\n        return ok(department);\n      }\n      function deleteDepartment() {\n        if (!isAuthenticated()) return unauthorized();\n        departments = departments.filter(x => x.id != idFromUrl());\n        localStorage.setItem(departmentsKey, JSON.stringify(departments));\n        return ok();\n      }\n      function newDepartmentId() {\n        return (Date.now() + Math.random()).toString();\n      }\n      // helper functions\n      function ok(body) {\n        return of(new HttpResponse({\n          status: 200,\n          body\n        })).pipe(delay(500)); // delay observable to simulate server api call\n      }\n\n      function error(message) {\n        return throwError({\n          error: {\n            message\n          }\n        }).pipe(materialize(), delay(500), dematerialize());\n        // call materialize and dematerialize to ensure delay even if an error is thrown (https://github.com/Reactive-Extensions/RxJS/issues/6487)\n      }\n\n      function unauthorized() {\n        return throwError({\n          status: 401,\n          error: {\n            message: 'Unauthorized'\n          }\n        }).pipe(materialize(), delay(500), dematerialize());\n      }\n      function basicDetails(account) {\n        const {\n          id,\n          title,\n          firstName,\n          lastName,\n          email,\n          role,\n          dateCreated,\n          isVerified\n        } = account;\n        return {\n          id,\n          title,\n          firstName,\n          lastName,\n          email,\n          role,\n          dateCreated,\n          isVerified\n        };\n      }\n      function isAuthenticated() {\n        return !!currentAccount();\n      }\n      function isAuthorized(role) {\n        const account = currentAccount();\n        if (!account) return false;\n        return account.role === role;\n      }\n      function idFromUrl() {\n        const urlParts = url.split('/');\n        return urlParts[urlParts.length - 1];\n      }\n      function newAccountId() {\n        return accounts.length ? Math.max(...accounts.map(x => x.id)) + 1 : 1;\n      }\n      function currentAccount() {\n        // check if jwt token is in auth header\n        const authHeader = headers.get('Authorization');\n        if (!authHeader?.startsWith('Bearer fake-jwt-token')) return;\n        // check if token is expired\n        const jwtToken = JSON.parse(atob(authHeader.split('.')[1]));\n        const tokenExpired = Date.now() > jwtToken.exp * 1000;\n        if (tokenExpired) return;\n        const account = accounts.find(x => x.id === jwtToken.id);\n        return account;\n      }\n      function generateJwtToken(account) {\n        // create token that expires in 15 minutes\n        const tokenPayload = {\n          exp: Math.round(new Date(Date.now() + 15 * 60 * 1000).getTime() / 1000),\n          id: account.id\n        };\n        return `fake-jwt-token.${btoa(JSON.stringify(tokenPayload))}`;\n      }\n      function generateRefreshToken() {\n        const token = new Date().getTime().toString();\n        // add token cookie that expires in 7 days\n        const expires = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toUTCString();\n        document.cookie = `fakeRefreshToken=${token}; expires=${expires}; path=/`;\n        return token;\n      }\n      function getRefreshToken() {\n        // get refresh token from cookie\n        return (document.cookie.split(';').find(x => x.includes('fakeRefreshToken')) || '').split('=')[1];\n      }\n    }\n    static ɵfac = function FakeBackendInterceptor_Factory(t) {\n      return new (t || FakeBackendInterceptor)(i0.ɵɵinject(i1.AlertService));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: FakeBackendInterceptor,\n      factory: FakeBackendInterceptor.ɵfac\n    });\n  }\n  return FakeBackendInterceptor;\n})();\nexport let fakeBackendProvider = {\n  // use fake backend in place of Http service for backend-less development\n  provide: HTTP_INTERCEPTORS,\n  useClass: FakeBackendInterceptor,\n  multi: true\n};","map":{"version":3,"mappings":"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","names":["HttpResponse","HTTP_INTERCEPTORS","of","throwError","delay","materialize","dematerialize","Role","accountsKey","accounts","JSON","parse","localStorage","getItem","requestsKey","requests","employeesKey","employees","departmentsKey","departments","FakeBackendInterceptor","alertService","constructor","intercept","request","next","url","method","headers","body","handleRoute","endsWith","authenticate","refreshToken","revokeToken","register","verifyEmail","forgotPassword","validateResetToken","resetPassword","getAccounts","match","getAccountById","createAccount","updateAccount","deactivateAccount","activateAccount","getRequests","getRequestById","createRequest","updateRequest","deleteRequest","approveRequest","rejectRequest","getEmployees","getEmployeeById","createEmployee","updateEmployee","deleteEmployee","getDepartments","getDepartmentById","createDepartment","updateDepartment","deleteDepartment","handle","email","password","account","find","x","error","isActive","refreshTokens","push","generateRefreshToken","setItem","stringify","ok","basicDetails","jwtToken","generateJwtToken","id","message","getRefreshToken","unauthorized","includes","filter","isAuthenticated","setTimeout","info","location","origin","autoClose","newAccountId","role","Admin","User","dateCreated","Date","toISOString","verificationToken","getTime","toString","isVerified","confirmPassword","verifyUrl","token","resetToken","resetTokenExpires","now","resetUrl","map","idFromUrl","currentAccount","isAuthorized","params","Object","assign","newRequestId","status","createdAt","updatedAt","userId","userName","firstName","lastName","title","description","length","Math","max","mapEmployeeToFrontend","employee","accountId","some","e","employeeId","newEmployeeId","random","department","newDepartmentId","pipe","urlParts","split","authHeader","get","startsWith","atob","tokenExpired","exp","tokenPayload","round","btoa","expires","toUTCString","document","cookie","factory","fakeBackendProvider","provide","useClass","multi"],"sourceRoot":"","sources":["C:\\Users\\CLARKKYYY\\Desktop\\final-project_intprog-main\\frontend\\src\\app\\_helpers\\fake-backend.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpRequest, HttpResponse, HttpHandler, HttpEvent, HttpInterceptor, HTTP_INTERCEPTORS, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, of, throwError } from 'rxjs';\r\nimport { delay, materialize, dematerialize } from 'rxjs/operators';\r\n\r\nimport { AlertService } from '@app/_services';\r\nimport { Role } from '@app/_models';\r\n\r\n// array in local storage for accounts\r\nconst accountsKey = 'angular-10-signup-verification-boilerplate-accounts';\r\nlet accounts = JSON.parse(localStorage.getItem(accountsKey)) || [];\r\n\r\n// array in local storage for requests\r\nconst requestsKey = 'angular-10-signup-verification-boilerplate-requests';\r\nlet requests = JSON.parse(localStorage.getItem(requestsKey)) || [];\r\n\r\n// array in local storage for employees\r\nconst employeesKey = 'angular-10-signup-verification-boilerplate-employees';\r\nlet employees = JSON.parse(localStorage.getItem(employeesKey)) || [];\r\n\r\n// array in local storage for departments\r\nconst departmentsKey = 'angular-10-signup-verification-boilerplate-departments';\r\nlet departments = JSON.parse(localStorage.getItem(departmentsKey)) || [];\r\n\r\n@Injectable()\r\nexport class FakeBackendInterceptor implements HttpInterceptor {\r\n    constructor(private alertService: AlertService) { }\r\n\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        const { url, method, headers, body } = request;\r\n        const alertService = this.alertService;\r\n\r\n        return handleRoute();\r\n \r\n        function handleRoute() {\r\n            switch (true) {\r\n                case url.endsWith('/accounts/authenticate') && method === 'POST':\r\n                    return authenticate();\r\n                case url.endsWith('/accounts/refresh-token') && method === 'POST':\r\n                    return refreshToken();\r\n                case url.endsWith('/accounts/revoke-token') && method === 'POST':\r\n                    return revokeToken();\r\n                case url.endsWith('/accounts/register') && method === 'POST':\r\n                    return register();\r\n                case url.endsWith('/accounts/verify-email') && method === 'POST':\r\n                    return verifyEmail();\r\n                case url.endsWith('/accounts/forgot-password') && method === 'POST':\r\n                    return forgotPassword();\r\n                case url.endsWith('/accounts/validate-reset-token') && method === 'POST':\r\n                    return validateResetToken();\r\n                case url.endsWith('/accounts/reset-password') && method === 'POST':\r\n                    return resetPassword();\r\n                case url.endsWith('/accounts') && method === 'GET':\r\n                    return getAccounts();\r\n                case url.match(/\\/accounts\\/\\d+$/) && method === 'GET':\r\n                    return getAccountById();\r\n                case url.endsWith('/accounts') && method === 'POST':\r\n                    return createAccount();\r\n                case url.match(/\\/accounts\\/\\d+$/) && method === 'PUT':\r\n                    return updateAccount();\r\n                case url.endsWith('/accounts/deactivate') && method === 'PUT':\r\n                        return deactivateAccount();  \r\n                case url.endsWith('/accounts/activate') && method === 'PUT':\r\n                    return activateAccount();        \r\n                case url.endsWith('/requests') && method === 'GET':\r\n                    return getRequests();\r\n                case url.match(/\\/requests\\/\\d+$/) && method === 'GET':\r\n                    return getRequestById();\r\n                case url.endsWith('/requests') && method === 'POST':\r\n                    return createRequest();\r\n                case url.match(/\\/requests\\/\\d+$/) && method === 'PUT':\r\n                    return updateRequest();\r\n                case url.match(/\\/requests\\/\\d+$/) && method === 'DELETE':\r\n                    return deleteRequest();\r\n                case url.match(/\\/requests\\/\\d+\\/approve$/) && method === 'PUT':\r\n                    return approveRequest();\r\n                case url.match(/\\/requests\\/\\d+\\/reject$/) && method === 'PUT':\r\n                    return rejectRequest();\r\n                case url.endsWith('/employees') && method === 'GET':\r\n                    return getEmployees();\r\n                case url.match(/\\/employees\\/\\w+$/) && method === 'GET':\r\n                    return getEmployeeById();\r\n                case url.endsWith('/employees') && method === 'POST':\r\n                    return createEmployee();\r\n                case url.match(/\\/employees\\/\\w+$/) && method === 'PUT':\r\n                    return updateEmployee();\r\n                case url.match(/\\/employees\\/\\w+$/) && method === 'DELETE':\r\n                    return deleteEmployee();\r\n                case url.endsWith('/departments') && method === 'GET':\r\n                    return getDepartments();\r\n                case url.match(/\\/departments\\/[^/]+$/) && method === 'GET':\r\n                    return getDepartmentById();\r\n                case url.endsWith('/departments') && method === 'POST':\r\n                    return createDepartment();\r\n                case url.match(/\\/departments\\/[^/]+$/) && method === 'PUT':\r\n                    return updateDepartment();\r\n                case url.match(/\\/departments\\/[^/]+$/) && method === 'DELETE':\r\n                    return deleteDepartment();\r\n                default:\r\n                    // pass through any requests not handled above\r\n                    return next.handle(request);\r\n            }\r\n        }\r\n\r\n        // route functions\r\n\r\n        function authenticate() {\r\n            const { email, password } = body;\r\n            const account = accounts.find(x => x.email === email && x.password === password );\r\n        \r\n            if (!account) return error('Email or password is incorrect');\r\n            if (!account.isActive) return error('Account is deactivated');\r\n        \r\n            // add refresh token to account\r\n            account.refreshTokens.push(generateRefreshToken());\r\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\r\n        \r\n            return ok({\r\n                ...basicDetails(account),\r\n                jwtToken: generateJwtToken(account)\r\n            });\r\n        }\r\n\r\n        //deactivate account\r\n        function deactivateAccount() {\r\n            const { id } = body; // Extract the account ID from the request body\r\n            const account = accounts.find(x => x.id === id); // Find the account by ID\r\n\r\n            if (account) {\r\n                if (!account.isActive) {\r\n                    return error('Account is already deactivated'); // Prevent redundant deactivation\r\n                }\r\n\r\n                account.isActive = false; // Set the account as deactivated\r\n                localStorage.setItem(accountsKey, JSON.stringify(accounts)); // Save changes to localStorage\r\n                return ok({ message: 'Account deactivated successfully' }); // Return success response\r\n            } else {\r\n                return error('Account not found'); // Return error if account doesn't exist\r\n            }\r\n        }\r\n        function activateAccount() {\r\n            const { id } = body; // Extract the account ID from the request body\r\n            const account = accounts.find(x => x.id === id); // Find the account by ID\r\n        \r\n            if (account) {\r\n                if (account.isActive) {\r\n                    return error('Account is already active'); // Prevent redundant activation\r\n                }\r\n        \r\n                account.isActive = true; // Set the account as active\r\n                localStorage.setItem(accountsKey, JSON.stringify(accounts)); // Save changes to localStorage\r\n                return ok({ message: 'Account activated successfully' }); // Return success response\r\n            } else {\r\n                return error('Account not found'); // Return error if account doesn't exist\r\n            }\r\n        }\r\n        \r\n\r\n        function refreshToken() {\r\n            const refreshToken = getRefreshToken();\r\n            \r\n            if (!refreshToken) return unauthorized();\r\n\r\n            const account = accounts.find(x => x.refreshTokens.includes(refreshToken));\r\n            \r\n            if (!account) return unauthorized();\r\n\r\n            // replace old refresh token with a new one and save\r\n            account.refreshTokens = account.refreshTokens.filter(x => x !== refreshToken);\r\n            account.refreshTokens.push(generateRefreshToken());\r\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\r\n\r\n            return ok({\r\n                ...basicDetails(account),\r\n                jwtToken: generateJwtToken(account)\r\n            });\r\n\r\n        }\r\n\r\n        function revokeToken() {\r\n            if (!isAuthenticated()) return unauthorized();\r\n\r\n            const refreshToken = getRefreshToken();\r\n            const account = accounts.find(x => x.refreshTokens.includes(refreshToken));\r\n\r\n            // revoke token and save\r\n            account.refreshTokens = account.refreshTokens.filter(x => x !== refreshToken);\r\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\r\n\r\n            return ok();\r\n        }\r\n\r\n        function register() {\r\n            const account = body;\r\n\r\n            if (accounts.find(x => x.email === account.email)) {\r\n                // display email already registered \"email\" in alert\r\n                setTimeout(() => {\r\n                    alertService.info(\r\n                        `<h4>Email Already Registered</h4>\r\n                        <p>Your email ${account.email} is already registered.</p>\r\n                        <p>If you don't know your password please visit the <a href=\"${location.origin}/account/forgot-password\">forgot password</a> page.</p>\r\n                        <div><strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an api. A real backend would send a real email.</div>`,\r\n                        { autoClose: false });\r\n                }, 1000);\r\n\r\n                // always return ok() response to prevent email enumeration\r\n                return ok();\r\n            }\r\n\r\n            // assign account id and a few other properties then save\r\n            account.id = newAccountId();\r\n            if (account.id === 1) {\r\n                // first registered account is an admin\r\n                account.role = Role.Admin;\r\n            } else {\r\n                account.role = Role.User;\r\n            }\r\n            account.dateCreated = new Date().toISOString();\r\n            account.verificationToken = new Date().getTime().toString();\r\n            account.isVerified = true;\r\n            account.isActive = true; // New property added to ensure account is active by default\r\n            account.refreshTokens = [];\r\n            delete account.confirmPassword;\r\n            accounts.push(account);\r\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\r\n\r\n            // display verification email in alert\r\n            setTimeout(() => {\r\n                const verifyUrl = `${location.origin}/account/verify-email?token=${account.verificationToken}`;\r\n                alertService.info(`\r\n                    <h4>Verification Email</h4>\r\n                    <p>Thanks for registering!</p>\r\n                    <p>Please click the below link to verify your email address:</p>\r\n                    <p><a href=\"${verifyUrl}\">${verifyUrl}</a></p>\r\n                    <div><strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an api. A real backend would send a real email.</div>\r\n                `, { autoClose: false });\r\n            }, 1000);\r\n\r\n            return ok();\r\n        }\r\n\r\n        function verifyEmail() {\r\n            const { token } = body;\r\n            const account = accounts.find(x => x.verificationToken && x.verificationToken === token);\r\n\r\n            if (!account) return error('Verification failed');\r\n\r\n            // set is verified flag to true if token is valid\r\n            account.isVerified = true;\r\n            delete account.verificationToken; // Remove the token after verification\r\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\r\n\r\n            return ok();\r\n        }\r\n\r\n        function forgotPassword() {\r\n            const { email } = body;\r\n            const account = accounts.find(x => x.email === email);\r\n        \r\n            // always return ok() response to prevent email enumeration\r\n            if (!account) return ok();\r\n        \r\n            // create reset token that expires after 24 hours\r\n            account.resetToken = new Date().getTime().toString();\r\n            account.resetTokenExpires = new Date(Date.now() + 24*60*60*1000).toISOString();\r\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\r\n        \r\n            // display password reset email in alert\r\n            setTimeout(() => {\r\n                const resetUrl = `${location.origin}/account/reset-password?token=${account.resetToken}`;\r\n                alertService.info(\r\n                    `<h4>Reset Password Email</h4>\r\n                    <p>Please click the below link to reset your password, the link will be valid for 1 day:</p>\r\n                    <p><a href=\"${resetUrl}\">${resetUrl}</a></p>\r\n                    <div><strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an api. A real backend would send a real email.</div>`,\r\n                    { autoClose: false });\r\n            }, 1000);\r\n        \r\n            return ok();\r\n        }\r\n        \r\n        function validateResetToken() {\r\n            const { token } = body;\r\n            const account = accounts.find(x =>\r\n                !!x.resetToken === token && x.resetToken === token &&\r\n                new Date() < new Date(x.resetTokenExpires)\r\n            );\r\n        \r\n            if (!account) return error('Invalid token');\r\n        \r\n            return ok();\r\n        }\r\n        \r\n        function resetPassword() {\r\n            const { token, password } = body;\r\n            const account = accounts.find(x => \r\n                !!x.resetToken && x.resetToken === token &&\r\n                new Date() < new Date(x.resetTokenExpires)\r\n            );\r\n\r\n            if (!account) return error('Invalid token');\r\n\r\n            // update password and remove reset token\r\n            account.password = password;\r\n            account.isVerified = true;\r\n            delete account.resetToken;\r\n            delete account.resetTokenExpires;\r\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\r\n\r\n            return ok();\r\n        }\r\n\r\n        function getAccounts() {\r\n            if (!isAuthenticated()) return unauthorized();\r\n            return ok(accounts.map(x => basicDetails(x)));\r\n        }\r\n\r\n        function getAccountById() {\r\n            if (!isAuthenticated()) return unauthorized();\r\n\r\n            let account = accounts.find(x => x.id === idFromUrl());\r\n\r\n            // user accounts can get own profile and admin accounts can get all profiles\r\n            if (account.id !== currentAccount().id && !isAuthorized(Role.Admin)) {\r\n                return unauthorized();\r\n            }\r\n\r\n            return ok(basicDetails(account));\r\n        }\r\n\r\n        function createAccount() {\r\n            if (!isAuthorized(Role.Admin)) return unauthorized();\r\n\r\n            const account = body;\r\n            if (accounts.find(x => x.email === account.email)) {\r\n                return error(`Email ${account.email} is already registered`);\r\n            }\r\n\r\n            // assign account id and a few other properties then save\r\n            account.id = newAccountId();\r\n            if (account.id === 1) {\r\n                // first registered account is an admin\r\n                account.role = Role.Admin;\r\n            } else {\r\n                account.role = Role.User;\r\n            }\r\n            account.dateCreated = new Date().toISOString();\r\n            account.isVerified = true;\r\n            account.refreshTokens = [];\r\n            delete account.confirmPassword;\r\n            accounts.push(account);\r\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\r\n\r\n            return ok();\r\n        }\r\n\r\n        function updateAccount() {\r\n            if (!isAuthenticated()) return unauthorized();\r\n\r\n            let params = body;\r\n            let account = accounts.find(x => x.id === idFromUrl());\r\n\r\n            // user accounts can update own profile and admin accounts can update all profiles\r\n            if (account.id !== currentAccount().id && !isAuthorized(Role.Admin)) {\r\n                return unauthorized();\r\n            }\r\n\r\n            // only update password if included\r\n            if (!params.password) {\r\n                delete params.password;\r\n            }\r\n            // don't save confirm password\r\n            delete params.confirmPassword;\r\n\r\n            // update and save account\r\n            Object.assign(account, params);\r\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\r\n\r\n            return ok(basicDetails(account));\r\n        }\r\n\r\n        // function deleteAccount() {\r\n        //     if (!isAuthenticated()) return unauthorized();\r\n\r\n        //     let account = accounts.find(x => x.id === idFromUrl());\r\n\r\n        //     // user accounts can delete own account and admin accounts can delete any account\r\n        //     if (account.id !== currentAccount().id && !isAuthorized(Role.Admin)) {\r\n        //         return unauthorized();\r\n        //     }\r\n\r\n        //     // delete account then save\r\n        //     accounts = accounts.filter(x => x.id !== idFromUrl());\r\n        //     localStorage.setItem(accountsKey, JSON.stringify(accounts));\r\n        //     return ok();\r\n        // }\r\n\r\n        // request functions\r\n        function getRequests() {\r\n            if (!isAuthenticated()) return unauthorized();\r\n            return ok(requests);\r\n        }\r\n\r\n        function getRequestById() {\r\n            if (!isAuthenticated()) return unauthorized();\r\n            const request = requests.find(x => x.id === idFromUrl());\r\n            return ok(request);\r\n        }\r\n\r\n        function createRequest() {\r\n            if (!isAuthenticated()) return unauthorized();\r\n            const request = body;\r\n            request.id = newRequestId();\r\n            request.status = 'pending';\r\n            request.createdAt = new Date().toISOString();\r\n            request.updatedAt = new Date().toISOString();\r\n            request.userId = currentAccount().id;\r\n            request.userName = currentAccount().firstName + ' ' + currentAccount().lastName;\r\n            requests.push(request);\r\n            localStorage.setItem(requestsKey, JSON.stringify(requests));\r\n            return ok(request);\r\n        }\r\n\r\n        function updateRequest() {\r\n            if (!isAuthenticated()) return unauthorized();\r\n            const request = requests.find(x => x.id === idFromUrl());\r\n            if (!request) return error('Request not found');\r\n            \r\n            // only allow updating title and description\r\n            request.title = body.title;\r\n            request.description = body.description;\r\n            request.updatedAt = new Date().toISOString();\r\n            localStorage.setItem(requestsKey, JSON.stringify(requests));\r\n            return ok(request);\r\n        }\r\n\r\n        function deleteRequest() {\r\n            if (!isAuthenticated()) return unauthorized();\r\n            if (!isAuthorized(Role.Admin)) return unauthorized();\r\n            \r\n            requests = requests.filter(x => x.id !== idFromUrl());\r\n            localStorage.setItem(requestsKey, JSON.stringify(requests));\r\n            return ok();\r\n        }\r\n\r\n        function approveRequest() {\r\n            if (!isAuthenticated()) return unauthorized();\r\n            if (!isAuthorized(Role.Admin)) return unauthorized();\r\n            \r\n            const request = requests.find(x => x.id === idFromUrl());\r\n            if (!request) return error('Request not found');\r\n            \r\n            if (request.status === 'approved') {\r\n                return error('Request is already approved');\r\n            }\r\n            \r\n            request.status = 'approved';\r\n            request.updatedAt = new Date().toISOString();\r\n            localStorage.setItem(requestsKey, JSON.stringify(requests));\r\n            return ok(request);\r\n        }\r\n\r\n        function rejectRequest() {\r\n            if (!isAuthenticated()) return unauthorized();\r\n            if (!isAuthorized(Role.Admin)) return unauthorized();\r\n            \r\n            const request = requests.find(x => x.id === idFromUrl());\r\n            if (!request) return error('Request not found');\r\n            \r\n            if (request.status === 'rejected') {\r\n                return error('Request is already rejected');\r\n            }\r\n            \r\n            request.status = 'rejected';\r\n            request.updatedAt = new Date().toISOString();\r\n            localStorage.setItem(requestsKey, JSON.stringify(requests));\r\n            return ok(request);\r\n        }\r\n\r\n        function newRequestId() {\r\n            return requests.length ? Math.max(...requests.map(x => x.id)) + 1 : 1;\r\n        }\r\n\r\n        // Employee functions\r\n        function getEmployees() {\r\n            if (!isAuthenticated()) return unauthorized();\r\n            return ok(employees.map(mapEmployeeToFrontend));\r\n        }\r\n\r\n        function getEmployeeById() {\r\n            if (!isAuthenticated()) return unauthorized();\r\n            const employee = employees.find(x => x.id == idFromUrl());\r\n            return ok(mapEmployeeToFrontend(employee));\r\n        }\r\n\r\n        function createEmployee() {\r\n            if (!isAuthenticated()) return unauthorized();\r\n            const employee = body;\r\n\r\n            // Find account by email or id\r\n            const account = accounts.find(x => x.email === employee.account || x.id === employee.accountId);\r\n            if (!account) {\r\n                return error('Account does not exist. Please create an account first.');\r\n            }\r\n\r\n            // Check for duplicate employeeId\r\n            if (employees.some(e => e.employeeId === employee.employeeId)) {\r\n                return error('Employee ID already exists.');\r\n            }\r\n\r\n            employee.id = newEmployeeId();\r\n            employee.accountId = account.id; // Store the relationship\r\n            employee.account = account.email; // For display\r\n            employee.isActive = employee.status === 'Active';\r\n            employees.push(employee);\r\n            localStorage.setItem(employeesKey, JSON.stringify(employees));\r\n            return ok(mapEmployeeToFrontend(employee));\r\n        }\r\n\r\n        function updateEmployee() {\r\n            if (!isAuthenticated()) return unauthorized();\r\n            const employee = employees.find(x => x.id == idFromUrl());\r\n            if (!employee) return error('Employee not found');\r\n            Object.assign(employee, body);\r\n            employee.isActive = employee.status === 'Active';\r\n            localStorage.setItem(employeesKey, JSON.stringify(employees));\r\n            return ok(mapEmployeeToFrontend(employee));\r\n        }\r\n\r\n        function deleteEmployee() {\r\n            if (!isAuthenticated()) return unauthorized();\r\n            employees = employees.filter(x => x.id != idFromUrl());\r\n            localStorage.setItem(employeesKey, JSON.stringify(employees));\r\n            return ok();\r\n        }\r\n\r\n        function newEmployeeId() {\r\n            return (Date.now() + Math.random()).toString();\r\n        }\r\n\r\n        function mapEmployeeToFrontend(employee) {\r\n            if (!employee) return employee;\r\n            return {\r\n                ...employee,\r\n                status: employee.isActive ? 'Active' : 'Inactive'\r\n            };\r\n        }\r\n\r\n        // Department functions\r\n        function getDepartments() {\r\n            if (!isAuthenticated()) return unauthorized();\r\n            return ok(departments);\r\n        }\r\n\r\n        function getDepartmentById() {\r\n            if (!isAuthenticated()) return unauthorized();\r\n            const department = departments.find(x => x.id == idFromUrl());\r\n            return ok(department);\r\n        }\r\n\r\n        function createDepartment() {\r\n            if (!isAuthenticated()) return unauthorized();\r\n            const department = body;\r\n            department.id = newDepartmentId();\r\n            departments.push(department);\r\n            localStorage.setItem(departmentsKey, JSON.stringify(departments));\r\n            return ok(department);\r\n        }\r\n\r\n        function updateDepartment() {\r\n            if (!isAuthenticated()) return unauthorized();\r\n            const department = departments.find(x => x.id == idFromUrl());\r\n            if (!department) return error('Department not found');\r\n            Object.assign(department, body);\r\n            localStorage.setItem(departmentsKey, JSON.stringify(departments));\r\n            return ok(department);\r\n        }\r\n\r\n        function deleteDepartment() {\r\n            if (!isAuthenticated()) return unauthorized();\r\n            departments = departments.filter(x => x.id != idFromUrl());\r\n            localStorage.setItem(departmentsKey, JSON.stringify(departments));\r\n            return ok();\r\n        }\r\n\r\n        function newDepartmentId() {\r\n            return (Date.now() + Math.random()).toString();\r\n        }\r\n\r\n        // helper functions\r\n\r\n        function ok(body?) {\r\n            return of(new HttpResponse({ status: 200, body }))\r\n                .pipe(delay(500)); // delay observable to simulate server api call\r\n        }\r\n\r\n        function error(message) {\r\n            return throwError({ error: { message } })\r\n                .pipe(materialize(), delay(500), dematerialize());\r\n            // call materialize and dematerialize to ensure delay even if an error is thrown (https://github.com/Reactive-Extensions/RxJS/issues/6487)\r\n        }\r\n\r\n        function unauthorized() {\r\n            return throwError({ status: 401, error: { message: 'Unauthorized' } })\r\n                .pipe(materialize(), delay(500), dematerialize());\r\n        }\r\n\r\n        function basicDetails(account) {\r\n            const { id, title, firstName, lastName, email, role, dateCreated, isVerified } = account;\r\n            return { id, title, firstName, lastName, email, role, dateCreated, isVerified };\r\n        }\r\n\r\n        function isAuthenticated() {\r\n            return !!currentAccount();\r\n        }\r\n\r\n        function isAuthorized(role: string) {\r\n            const account = currentAccount();\r\n            if (!account) return false;\r\n            return account.role === role;\r\n        }\r\n\r\n        function idFromUrl() {\r\n            const urlParts = url.split('/');\r\n            return urlParts[urlParts.length - 1];\r\n        }\r\n\r\n        function newAccountId() {\r\n            return accounts.length ? Math.max(...accounts.map(x => x.id)) + 1 : 1;\r\n        }\r\n\r\n        function currentAccount() {\r\n            // check if jwt token is in auth header\r\n            const authHeader = headers.get('Authorization');\r\n            if (!authHeader?.startsWith('Bearer fake-jwt-token')) return;\r\n\r\n            // check if token is expired\r\n            const jwtToken = JSON.parse(atob(authHeader.split('.')[1]));\r\n            const tokenExpired = Date.now() > (jwtToken.exp * 1000);\r\n            if (tokenExpired) return;\r\n\r\n            const account = accounts.find(x => x.id === jwtToken.id);\r\n            return account;\r\n        }\r\n\r\n        function generateJwtToken(account) {\r\n            // create token that expires in 15 minutes\r\n            const tokenPayload = {\r\n                exp: Math.round(new Date(Date.now() + 15*60*1000).getTime() / 1000),\r\n                id: account.id\r\n            }\r\n            return `fake-jwt-token.${btoa(JSON.stringify(tokenPayload))}`;\r\n        }\r\n\r\n        function generateRefreshToken() {\r\n            const token = new Date().getTime().toString();\r\n\r\n            // add token cookie that expires in 7 days\r\n            const expires = new Date(Date.now() + 7*24*60*60*1000).toUTCString();\r\n            document.cookie = `fakeRefreshToken=${token}; expires=${expires}; path=/`;\r\n\r\n            return token;\r\n        }\r\n\r\n        function getRefreshToken() {\r\n            // get refresh token from cookie\r\n            return (document.cookie.split(';').find(x => x.includes('fakeRefreshToken')) || '').split('=')[1];\r\n        }\r\n    }\r\n\r\n    \r\n}\r\n    \r\nexport let fakeBackendProvider = {\r\n    // use fake backend in place of Http service for backend-less development\r\n    provide: HTTP_INTERCEPTORS,\r\n    useClass: FakeBackendInterceptor,\r\n    multi: true\r\n};"]},"metadata":{},"sourceType":"module","externalDependencies":[]}