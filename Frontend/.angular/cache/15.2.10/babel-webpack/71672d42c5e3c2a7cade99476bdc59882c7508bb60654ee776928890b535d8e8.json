{"ast":null,"code":"import { NavigationStart } from '@angular/router';\nimport { AlertType } from '@app/_models';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@app/_services\";\nimport * as i3 from \"@angular/common\";\nfunction AlertComponent_div_0_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"a\", 4);\n    i0.ɵɵlistener(\"click\", function AlertComponent_div_0_div_2_Template_a_click_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const alert_r2 = restoredCtx.$implicit;\n      const ctx_r3 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r3.removeAlert(alert_r2));\n    });\n    i0.ɵɵtext(2, \"\\u00D7\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"span\", 5);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const alert_r2 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassMap(ctx_r1.cssClasses(alert_r2));\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"innerHTML\", alert_r2.message, i0.ɵɵsanitizeHtml);\n  }\n}\nfunction AlertComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1)(1, \"div\", 2);\n    i0.ɵɵtemplate(2, AlertComponent_div_0_div_2_Template, 4, 4, \"div\", 3);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.alerts);\n  }\n}\nexport let AlertComponent = /*#__PURE__*/(() => {\n  class AlertComponent {\n    router;\n    alertService;\n    id = 'default-alert';\n    fade = true;\n    alerts = [];\n    alertSubscription;\n    routeSubscription;\n    constructor(router, alertService) {\n      this.router = router;\n      this.alertService = alertService;\n    }\n    ngOnInit() {\n      // subscribe to new alert notifications\n      this.alertSubscription = this.alertService.onAlert(this.id).subscribe(alert => {\n        // clear alerts when an empty alert is received\n        if (!alert.message) {\n          // filter out alerts without 'keepAfterRouteChange' flag\n          this.alerts = this.alerts.filter(x => x.keepAfterRouteChange);\n          // remove 'keepAfterRouteChange' flag on the rest\n          this.alerts.forEach(x => delete x.keepAfterRouteChange);\n          return;\n        }\n        // add alert to array\n        this.alerts.push(alert);\n        // auto close alert if required\n        if (alert.autoClose) {\n          setTimeout(() => this.removeAlert(alert), 3000);\n        }\n      });\n      // clear alerts on location change\n      this.routeSubscription = this.router.events.subscribe(event => {\n        if (event instanceof NavigationStart) {\n          this.alertService.clear(this.id);\n        }\n      });\n    }\n    ngOnDestroy() {\n      // unsubscribe to avoid memory leaks\n      this.alertSubscription.unsubscribe();\n      this.routeSubscription.unsubscribe();\n    }\n    removeAlert(alert) {\n      // check if already removed to prevent error on auto close\n      if (!this.alerts.includes(alert)) return;\n      if (this.fade) {\n        // fade out alert\n        alert.fade = true;\n        // remove alert after faded out\n        setTimeout(() => {\n          this.alerts = this.alerts.filter(x => x !== alert);\n        }, 250);\n      } else {\n        // remove alert\n        this.alerts = this.alerts.filter(x => x !== alert);\n      }\n    }\n    cssClasses(alert) {\n      if (!alert) return;\n      const classes = ['alert', 'alert-dismissable'];\n      const alertTypeClass = {\n        [AlertType.Success]: 'alert alert-success',\n        [AlertType.Error]: 'alert alert-danger',\n        [AlertType.Info]: 'alert alert-info',\n        [AlertType.Warning]: 'alert alert-warning'\n      };\n      classes.push(alertTypeClass[alert.type]);\n      if (alert.fade) {\n        classes.push('fade');\n      }\n      return classes.join(' ');\n    }\n    static ɵfac = function AlertComponent_Factory(t) {\n      return new (t || AlertComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.AlertService));\n    };\n    static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AlertComponent,\n      selectors: [[\"alert\"]],\n      inputs: {\n        id: \"id\",\n        fade: \"fade\"\n      },\n      decls: 1,\n      vars: 1,\n      consts: [[\"class\", \"container\", 4, \"ngIf\"], [1, \"container\"], [1, \"m-3\"], [3, \"class\", 4, \"ngFor\", \"ngForOf\"], [1, \"close\", 3, \"click\"], [3, \"innerHTML\"]],\n      template: function AlertComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵtemplate(0, AlertComponent_div_0_Template, 3, 1, \"div\", 0);\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"ngIf\", ctx.alerts.length);\n        }\n      },\n      dependencies: [i3.NgForOf, i3.NgIf],\n      encapsulation: 2\n    });\n  }\n  return AlertComponent;\n})();","map":{"version":3,"mappings":"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","names":["NavigationStart","AlertType","i0","AlertComponent","router","alertService","id","fade","alerts","alertSubscription","routeSubscription","constructor","ngOnInit","onAlert","subscribe","alert","message","filter","x","keepAfterRouteChange","forEach","push","autoClose","setTimeout","removeAlert","events","event","clear","ngOnDestroy","unsubscribe","includes","cssClasses","classes","alertTypeClass","Success","Error","Info","Warning","type","join","selectors","inputs","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\watss\\Documents\\School\\magsayo\\Final-Project-Intprog\\Frontend\\src\\app\\_components\\alert.component.ts","C:\\Users\\watss\\Documents\\School\\magsayo\\Final-Project-Intprog\\Frontend\\src\\app\\_components\\alert.component.html"],"sourcesContent":["import { Component, OnInit, OnDestroy, Input } from '@angular/core';\r\nimport { Router, NavigationStart } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { Alert, AlertType } from '@app/_models';\r\nimport { AlertService } from '@app/_services';\r\n\r\n@Component({ selector: 'alert', templateUrl: 'alert.component.html' })\r\nexport class AlertComponent implements OnInit, OnDestroy {\r\n    @Input() id = 'default-alert';\r\n    @Input() fade = true;\r\n\r\n    alerts: Alert[] = [];\r\n    alertSubscription: Subscription;\r\n    routeSubscription: Subscription;\r\n\r\n    constructor(private router: Router, private alertService: AlertService) { }\r\n\r\n    ngOnInit() {\r\n        // subscribe to new alert notifications\r\n        this.alertSubscription = this.alertService.onAlert(this.id)\r\n          .subscribe(alert => {\r\n            // clear alerts when an empty alert is received\r\n            if (!alert.message) {\r\n              // filter out alerts without 'keepAfterRouteChange' flag\r\n              this.alerts = this.alerts.filter(x => x.keepAfterRouteChange);\r\n    \r\n              // remove 'keepAfterRouteChange' flag on the rest\r\n              this.alerts.forEach(x => delete x.keepAfterRouteChange);\r\n              return;\r\n            }\r\n    \r\n            // add alert to array\r\n            this.alerts.push(alert);\r\n    \r\n            // auto close alert if required\r\n            if (alert.autoClose) {\r\n              setTimeout(() => this.removeAlert(alert), 3000);\r\n            }\r\n          });\r\n    \r\n        // clear alerts on location change\r\n        this.routeSubscription = this.router.events.subscribe(event => {\r\n          if (event instanceof NavigationStart) {\r\n            this.alertService.clear(this.id);\r\n          }\r\n        });\r\n      }\r\n\r\n      ngOnDestroy() {\r\n        // unsubscribe to avoid memory leaks\r\n        this.alertSubscription.unsubscribe();\r\n        this.routeSubscription.unsubscribe();\r\n      }\r\n    \r\n      removeAlert(alert: Alert) {\r\n        // check if already removed to prevent error on auto close\r\n        if (!this.alerts.includes(alert)) return;\r\n    \r\n        if (this.fade) {\r\n          // fade out alert\r\n          alert.fade = true;\r\n    \r\n          // remove alert after faded out\r\n          setTimeout(() => {\r\n            this.alerts = this.alerts.filter(x => x !== alert);\r\n          }, 250);\r\n        } else {\r\n          // remove alert\r\n          this.alerts = this.alerts.filter(x => x !== alert);\r\n        }\r\n      }\r\n\r\n      cssClasses(alert: Alert) {\r\n        if (!alert) return;\r\n    \r\n        const classes = ['alert', 'alert-dismissable'];\r\n    \r\n        const alertTypeClass = {\r\n          [AlertType.Success]: 'alert alert-success',\r\n          [AlertType.Error]: 'alert alert-danger',\r\n          [AlertType.Info]: 'alert alert-info',\r\n          [AlertType.Warning]: 'alert alert-warning'\r\n        };\r\n    \r\n        classes.push(alertTypeClass[alert.type]);\r\n    \r\n        if (alert.fade) {\r\n          classes.push('fade');\r\n        }\r\n    \r\n        return classes.join(' ');\r\n      }\r\n    }","<div *ngIf=\"alerts.length\" class=\"container\">\r\n    <div class=\"m-3\">\r\n      <div *ngFor=\"let alert of alerts\" class=\"{{cssClasses(alert)}}\">\r\n        <a class=\"close\" (click)=\"removeAlert(alert)\">&times;</a>\r\n        <span [innerHTML]=\"alert.message\"></span>\r\n      </div>\r\n    </div>\r\n  </div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}