{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../../_services/department.service\";\nimport * as i4 from \"@angular/common\";\nfunction AddEditComponent_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12);\n    i0.ɵɵtext(1, \"Name is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    \"is-invalid\": a0\n  };\n};\nconst _c1 = function () {\n  return [\"/admin/departments\"];\n};\nexport let AddEditComponent = /*#__PURE__*/(() => {\n  class AddEditComponent {\n    formBuilder;\n    route;\n    router;\n    departmentService;\n    form;\n    id;\n    isAddMode;\n    loading = false;\n    submitted = false;\n    constructor(formBuilder, route, router, departmentService) {\n      this.formBuilder = formBuilder;\n      this.route = route;\n      this.router = router;\n      this.departmentService = departmentService;\n    }\n    ngOnInit() {\n      this.id = this.route.snapshot.params['id'];\n      this.isAddMode = !this.id;\n      this.form = this.formBuilder.group({\n        name: ['', Validators.required],\n        description: ['']\n      });\n      if (!this.isAddMode) {\n        this.departmentService.getById(this.id).subscribe(x => this.form.patchValue(x));\n      }\n    }\n    get f() {\n      return this.form.controls;\n    }\n    onSubmit() {\n      this.submitted = true;\n      if (this.form.invalid) {\n        return;\n      }\n      this.loading = true;\n      if (this.isAddMode) {\n        this.createDepartment();\n      } else {\n        this.updateDepartment();\n      }\n    }\n    createDepartment() {\n      this.departmentService.create(this.form.value).subscribe({\n        next: () => {\n          this.router.navigate(['/admin/departments'], {\n            relativeTo: this.route\n          });\n        },\n        error: error => {\n          this.loading = false;\n        }\n      });\n    }\n    updateDepartment() {\n      this.departmentService.update(this.id, this.form.value).subscribe({\n        next: () => {\n          this.router.navigate(['/admin/departments'], {\n            relativeTo: this.route\n          });\n        },\n        error: error => {\n          this.loading = false;\n        }\n      });\n    }\n    static ɵfac = function AddEditComponent_Factory(t) {\n      return new (t || AddEditComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.DepartmentService));\n    };\n    static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AddEditComponent,\n      selectors: [[\"ng-component\"]],\n      decls: 19,\n      vars: 9,\n      consts: [[1, \"card\"], [1, \"card-header\"], [1, \"card-body\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"mb-3\"], [1, \"form-label\"], [\"type\", \"text\", \"formControlName\", \"name\", 1, \"form-control\", 3, \"ngClass\"], [\"class\", \"invalid-feedback\", 4, \"ngIf\"], [\"type\", \"text\", \"formControlName\", \"description\", 1, \"form-control\"], [1, \"text-end\"], [1, \"btn\", \"btn-primary\", \"me-2\", 3, \"disabled\"], [1, \"btn\", \"btn-secondary\", 3, \"routerLink\"], [1, \"invalid-feedback\"]],\n      template: function AddEditComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n          i0.ɵɵtext(2);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(3, \"div\", 2)(4, \"form\", 3);\n          i0.ɵɵlistener(\"ngSubmit\", function AddEditComponent_Template_form_ngSubmit_4_listener() {\n            return ctx.onSubmit();\n          });\n          i0.ɵɵelementStart(5, \"div\", 4)(6, \"label\", 5);\n          i0.ɵɵtext(7, \"Name\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(8, \"input\", 6);\n          i0.ɵɵtemplate(9, AddEditComponent_div_9_Template, 2, 0, \"div\", 7);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(10, \"div\", 4)(11, \"label\", 5);\n          i0.ɵɵtext(12, \"Description\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(13, \"input\", 8);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(14, \"div\", 9)(15, \"button\", 10);\n          i0.ɵɵtext(16, \"Save\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(17, \"button\", 11);\n          i0.ɵɵtext(18, \"Cancel\");\n          i0.ɵɵelementEnd()()()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(2);\n          i0.ɵɵtextInterpolate1(\"\", ctx.id ? \"Edit\" : \"Add\", \" Department\");\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"formGroup\", ctx.form);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(6, _c0, ctx.submitted && ctx.f.name.errors));\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.submitted && ctx.f.name.errors);\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"disabled\", ctx.loading);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(8, _c1));\n        }\n      },\n      dependencies: [i4.NgClass, i4.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i2.RouterLink],\n      encapsulation: 2\n    });\n  }\n  return AddEditComponent;\n})();","map":{"version":3,"mappings":"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","names":["Validators","i0","AddEditComponent","formBuilder","route","router","departmentService","form","id","isAddMode","loading","submitted","constructor","ngOnInit","snapshot","params","group","name","required","description","getById","subscribe","x","patchValue","f","controls","onSubmit","invalid","createDepartment","updateDepartment","create","value","next","navigate","relativeTo","error","update","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\watss\\Documents\\School\\magsayo\\Final-Project-Intprog\\Frontend\\src\\app\\admin\\departments\\add-edit.component.ts","C:\\Users\\watss\\Documents\\School\\magsayo\\Final-Project-Intprog\\Frontend\\src\\app\\admin\\departments\\add-edit.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { DepartmentService } from '../../_services/department.service';\r\nimport { Department } from '../../_models/department';\r\n\r\n@Component({\r\n    templateUrl: 'add-edit.component.html'\r\n})\r\nexport class AddEditComponent implements OnInit {\r\n    form: FormGroup;\r\n    id: string;\r\n    isAddMode: boolean;\r\n    loading = false;\r\n    submitted = false;\r\n\r\n    constructor(\r\n        private formBuilder: FormBuilder,\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        private departmentService: DepartmentService\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.id = this.route.snapshot.params['id'];\r\n        this.isAddMode = !this.id;\r\n\r\n        this.form = this.formBuilder.group({\r\n            name: ['', Validators.required],\r\n            description: ['']\r\n        });\r\n\r\n        if (!this.isAddMode) {\r\n            this.departmentService.getById(this.id)\r\n                .subscribe(x => this.form.patchValue(x));\r\n        }\r\n    }\r\n\r\n    get f() { return this.form.controls; }\r\n\r\n    onSubmit() {\r\n        this.submitted = true;\r\n        if (this.form.invalid) {\r\n            return;\r\n        }\r\n        this.loading = true;\r\n        if (this.isAddMode) {\r\n            this.createDepartment();\r\n        } else {\r\n            this.updateDepartment();\r\n        }\r\n    }\r\n\r\n    private createDepartment() {\r\n        this.departmentService.create(this.form.value)\r\n            .subscribe({\r\n                next: () => {\r\n                    this.router.navigate(['/admin/departments'], { relativeTo: this.route });\r\n                },\r\n                error: error => {\r\n                    this.loading = false;\r\n                }\r\n            });\r\n    }\r\n\r\n    private updateDepartment() {\r\n        this.departmentService.update(this.id, this.form.value)\r\n            .subscribe({\r\n                next: () => {\r\n                    this.router.navigate(['/admin/departments'], { relativeTo: this.route });\r\n                },\r\n                error: error => {\r\n                    this.loading = false;\r\n                }\r\n            });\r\n    }\r\n} ","<div class=\"card\">\r\n    <div class=\"card-header\">{{ id ? 'Edit' : 'Add' }} Department</div>\r\n    <div class=\"card-body\">\r\n        <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n            <div class=\"mb-3\">\r\n                <label class=\"form-label\">Name</label>\r\n                <input type=\"text\" formControlName=\"name\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.name.errors }\">\r\n                <div *ngIf=\"submitted && f.name.errors\" class=\"invalid-feedback\">Name is required</div>\r\n            </div>\r\n            <div class=\"mb-3\">\r\n                <label class=\"form-label\">Description</label>\r\n                <input type=\"text\" formControlName=\"description\" class=\"form-control\">\r\n            </div>\r\n            <div class=\"text-end\">\r\n                <button [disabled]=\"loading\" class=\"btn btn-primary me-2\">Save</button>\r\n                <button [routerLink]=\"['/admin/departments']\" class=\"btn btn-secondary\">Cancel</button>\r\n            </div>\r\n        </form>\r\n    </div>\r\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}