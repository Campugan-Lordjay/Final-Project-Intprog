{"ast":null,"code":"import { throwError } from \"rxjs\";\nimport { catchError } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@app/_services\";\nexport let ErrorInterceptor = /*#__PURE__*/(() => {\n  class ErrorInterceptor {\n    acccountService;\n    constructor(acccountService) {\n      this.acccountService = acccountService;\n    }\n    intercept(request, next) {\n      return next.handle(request).pipe(catchError(err => {\n        if ([401, 403].includes(err.status) && this.acccountService.accountValue) {\n          //auto logut if 401 or 403 response returned from api\n          this.acccountService.logout();\n        }\n        const error = err && err.error && err.error.message || err.statusText;\n        console.error(err);\n        return throwError(error);\n      }));\n    }\n    static ɵfac = function ErrorInterceptor_Factory(t) {\n      return new (t || ErrorInterceptor)(i0.ɵɵinject(i1.AccountService));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ErrorInterceptor,\n      factory: ErrorInterceptor.ɵfac\n    });\n  }\n  return ErrorInterceptor;\n})();","map":{"version":3,"mappings":"AAOA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,QAAQ,gBAAgB;;;AAK3C,WAAaC,gBAAgB;EAAvB,MAAOA,gBAAgB;IACLC;IAApBC,YAAoBD,eAA+B;MAA/B,oBAAe,GAAfA,eAAe;IAAmB;IAEtDE,SAAS,CACLC,OAAyB,EACzBC,IAAiB;MAEjB,OAAOA,IAAI,CAACC,MAAM,CAACF,OAAO,CAAC,CAACG,IAAI,CAC5BR,UAAU,CAACS,GAAG,IAAG;QACb,IACI,CAAC,GAAG,EAAE,GAAG,CAAC,CAACC,QAAQ,CAACD,GAAG,CAACE,MAAM,CAAC,IAC/B,IAAI,CAACT,eAAe,CAACU,YAAY,EACnC;UACE;UACA,IAAI,CAACV,eAAe,CAACW,MAAM,EAAE;;QAEjC,MAAMC,KAAK,GACNL,GAAG,IAAIA,GAAG,CAACK,KAAK,IAAIL,GAAG,CAACK,KAAK,CAACC,OAAO,IAAKN,GAAG,CAACO,UAAU;QAC7DC,OAAO,CAACH,KAAK,CAACL,GAAG,CAAC;QAClB,OAAOV,UAAU,CAACe,KAAK,CAAC;MAC5B,CAAC,CAAC,CACL;IACL;;uBAtBSb,gBAAgB;IAAA;;aAAhBA,gBAAgB;MAAAiB,SAAhBjB,gBAAgB;IAAA;;SAAhBA,gBAAgB;AAAA","names":["throwError","catchError","ErrorInterceptor","acccountService","constructor","intercept","request","next","handle","pipe","err","includes","status","accountValue","logout","error","message","statusText","console","factory"],"sourceRoot":"","sources":["C:\\Users\\watss\\Documents\\School\\magsayo\\Final-Project-Intprog\\Frontend\\src\\app\\_helpers\\error.interceptor.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\"\r\nimport {\r\n    HttpEvent,\r\n    HttpHandler,\r\n    HttpInterceptor,\r\n    HttpRequest,\r\n} from \"@angular/common/http\"\r\nimport { Observable, throwError } from \"rxjs\"\r\nimport { catchError } from \"rxjs/operators\"\r\n\r\nimport { AccountService } from \"@app/_services\"\r\n\r\n@Injectable()\r\nexport class ErrorInterceptor implements HttpInterceptor {\r\n    constructor(private acccountService: AccountService) {}\r\n\r\n    intercept(\r\n        request: HttpRequest<any>,\r\n        next: HttpHandler\r\n    ): Observable<HttpEvent<any>> {\r\n        return next.handle(request).pipe(\r\n            catchError(err => {\r\n                if (\r\n                    [401, 403].includes(err.status) &&\r\n                    this.acccountService.accountValue\r\n                ) {\r\n                    //auto logut if 401 or 403 response returned from api\r\n                    this.acccountService.logout()\r\n                }\r\n                const error =\r\n                    (err && err.error && err.error.message) || err.statusText\r\n                console.error(err)\r\n                return throwError(error)\r\n            })\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}