{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { first } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@app/_services\";\nimport * as i4 from \"@angular/common\";\nfunction LoginComponent_div_8_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Email is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_8_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Email is invalid\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 14);\n    i0.ɵɵtemplate(1, LoginComponent_div_8_div_1_Template, 2, 0, \"div\", 15);\n    i0.ɵɵtemplate(2, LoginComponent_div_8_div_2_Template, 2, 0, \"div\", 15);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.f.email.errors.required);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.f.email.errors.email);\n  }\n}\nfunction LoginComponent_div_13_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Password is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 14);\n    i0.ɵɵtemplate(1, LoginComponent_div_13_div_1_Template, 2, 0, \"div\", 15);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.f.password.errors.required);\n  }\n}\nfunction LoginComponent_span_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 16);\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    \"is-invalid\": a0\n  };\n};\nexport let LoginComponent = /*#__PURE__*/(() => {\n  class LoginComponent {\n    formBuilder;\n    route;\n    router;\n    accountService;\n    alertService;\n    form;\n    loading = false;\n    submitted = false;\n    constructor(formBuilder, route, router, accountService, alertService) {\n      this.formBuilder = formBuilder;\n      this.route = route;\n      this.router = router;\n      this.accountService = accountService;\n      this.alertService = alertService;\n    }\n    ngOnInit() {\n      this.form = this.formBuilder.group({\n        email: ['', [Validators.required, Validators.email]],\n        password: ['', Validators.required]\n      });\n    }\n    // convenience getter for easy access to form fields\n    get f() {\n      return this.form.controls;\n    }\n    onSubmit() {\n      this.submitted = true;\n      // reset alerts on submit\n      this.alertService.clear();\n      // stop here if form is invalid\n      if (this.form.invalid) {\n        return;\n      }\n      this.loading = true;\n      this.accountService.login(this.f.email.value, this.f.password.value).pipe(first()).subscribe({\n        next: () => {\n          // get return url from query parameters or default to home page\n          const returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\n          this.router.navigateByUrl(returnUrl);\n        },\n        error: error => {\n          this.alertService.error(error);\n          this.loading = false;\n        }\n      });\n    }\n    static ɵfac = function LoginComponent_Factory(t) {\n      return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.UntypedFormBuilder), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.AccountService), i0.ɵɵdirectiveInject(i3.AlertService));\n    };\n    static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: LoginComponent,\n      selectors: [[\"ng-component\"]],\n      decls: 24,\n      vars: 11,\n      consts: [[1, \"card-header\"], [1, \"card-body\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"type\", \"text\", \"formControlName\", \"email\", 1, \"form-control\", 3, \"ngClass\"], [\"class\", \"invalid-feedback\", 4, \"ngIf\"], [\"type\", \"password\", \"formControlName\", \"password\", 1, \"form-control\", 3, \"ngClass\"], [1, \"form-row\"], [1, \"form-group\", \"col\"], [1, \"btn\", \"btn-primary\", 3, \"disabled\"], [\"class\", \"spinner-border spinner-border-sm mr-1\", 4, \"ngIf\"], [\"routerLink\", \"../register\", 1, \"btn\", \"btn-link\"], [1, \"form-group\", \"col\", \"text-right\"], [\"routerLink\", \"../forgot-password\", 1, \"btn\", \"btn-link\", \"pr-0\"], [1, \"invalid-feedback\"], [4, \"ngIf\"], [1, \"spinner-border\", \"spinner-border-sm\", \"mr-1\"]],\n      template: function LoginComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"h3\", 0);\n          i0.ɵɵtext(1, \"Login\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(2, \"div\", 1)(3, \"form\", 2);\n          i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_3_listener() {\n            return ctx.onSubmit();\n          });\n          i0.ɵɵelementStart(4, \"div\", 3)(5, \"label\");\n          i0.ɵɵtext(6, \"Email\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(7, \"input\", 4);\n          i0.ɵɵtemplate(8, LoginComponent_div_8_Template, 3, 2, \"div\", 5);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(9, \"div\", 3)(10, \"label\");\n          i0.ɵɵtext(11, \"Password\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(12, \"input\", 6);\n          i0.ɵɵtemplate(13, LoginComponent_div_13_Template, 2, 1, \"div\", 5);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(14, \"div\", 7)(15, \"div\", 8)(16, \"button\", 9);\n          i0.ɵɵtemplate(17, LoginComponent_span_17_Template, 1, 0, \"span\", 10);\n          i0.ɵɵtext(18, \" Login \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(19, \"a\", 11);\n          i0.ɵɵtext(20, \"Register\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(21, \"div\", 12)(22, \"a\", 13);\n          i0.ɵɵtext(23, \"Forgot Password?\");\n          i0.ɵɵelementEnd()()()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"formGroup\", ctx.form);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(7, _c0, ctx.submitted && ctx.f.email.errors));\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.submitted && ctx.f.email.errors);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(9, _c0, ctx.submitted && ctx.f.password.errors));\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.submitted && ctx.f.password.errors);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"disabled\", ctx.loading);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.loading);\n        }\n      },\n      dependencies: [i4.NgClass, i4.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i2.RouterLink],\n      encapsulation: 2\n    });\n  }\n  return LoginComponent;\n})();","map":{"version":3,"mappings":"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","names":["Validators","first","i0","LoginComponent","formBuilder","route","router","accountService","alertService","form","loading","submitted","constructor","ngOnInit","group","email","required","password","f","controls","onSubmit","clear","invalid","login","value","pipe","subscribe","next","returnUrl","snapshot","queryParams","navigateByUrl","error","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\Jay Villafuerte\\OneDrive\\Desktop\\Final-Project-Intprog\\frontend\\src\\app\\account\\login.component.ts","C:\\Users\\Jay Villafuerte\\OneDrive\\Desktop\\Final-Project-Intprog\\frontend\\src\\app\\account\\login.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { UntypedFormBuilder, UntypedFormGroup, Validators } from '@angular/forms';\r\nimport { first } from 'rxjs/operators';\r\n\r\nimport { AccountService, AlertService } from '@app/_services';\r\n\r\n@Component({ templateUrl: 'login.component.html' })\r\nexport class LoginComponent implements OnInit {\r\n    form: UntypedFormGroup;\r\n    loading = false;\r\n    submitted = false;\r\n\r\n    constructor(\r\n        private formBuilder: UntypedFormBuilder,\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        private accountService: AccountService,\r\n        private alertService: AlertService\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.form = this.formBuilder.group({\r\n            email: ['', [Validators.required, Validators.email]],\r\n            password: ['', Validators.required]\r\n        });\r\n    }\r\n\r\n    // convenience getter for easy access to form fields\r\n    get f() { return this.form.controls; }\r\n\r\n    onSubmit() {\r\n        this.submitted = true;\r\n\r\n        // reset alerts on submit\r\n        this.alertService.clear();\r\n\r\n        // stop here if form is invalid\r\n        if (this.form.invalid) {\r\n            return;\r\n        }\r\n\r\n        this.loading = true;\r\n        this.accountService.login(this.f.email.value, this.f.password.value)\r\n            .pipe(first())\r\n            .subscribe({\r\n                next: () => {\r\n                    // get return url from query parameters or default to home page\r\n                    const returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\r\n                    this.router.navigateByUrl(returnUrl);\r\n                },\r\n                error: error => {\r\n                    this.alertService.error(error);\r\n                    this.loading = false;\r\n                }\r\n            });\r\n    }\r\n}","<h3 class=\"card-header\">Login</h3>\r\n<div class=\"card-body\">\r\n    <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n        <div class=\"form-group\">\r\n            <label>Email</label>\r\n            <input type=\"text\" formControlName=\"email\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.email.errors }\" />\r\n            <div *ngIf=\"submitted && f.email.errors\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"f.email.errors.required\">Email is required</div>\r\n                <div *ngIf=\"f.email.errors.email\">Email is invalid</div>\r\n            </div>\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <label>Password</label>\r\n            <input type=\"password\" formControlName=\"password\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.password.errors }\" />\r\n            <div *ngIf=\"submitted && f.password.errors\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"f.password.errors.required\">Password is required</div>\r\n            </div>\r\n        </div>\r\n        <div class=\"form-row\">\r\n            <div class=\"form-group col\">\r\n                <button [disabled]=\"loading\" class=\"btn btn-primary\">\r\n                    <span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"></span>\r\n                    Login\r\n                </button>\r\n                <a routerLink=\"../register\" class=\"btn btn-link\">Register</a>\r\n            </div>\r\n            <div class=\"form-group col text-right\">\r\n                <a routerLink=\"../forgot-password\" class=\"btn btn-link pr-0\">Forgot Password?</a>\r\n            </div>\r\n        </div>\r\n    </form>\r\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}