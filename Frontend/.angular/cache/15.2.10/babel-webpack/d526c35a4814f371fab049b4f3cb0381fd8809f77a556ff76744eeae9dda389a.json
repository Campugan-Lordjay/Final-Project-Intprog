{"ast":null,"code":"import { environment } from '@environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let EmployeeService = /*#__PURE__*/(() => {\n  class EmployeeService {\n    http;\n    constructor(http) {\n      this.http = http;\n    }\n    getAll() {\n      return this.http.get(`${environment.apiUrl}/employees`);\n    }\n    getById(id) {\n      return this.http.get(`${environment.apiUrl}/employees/${id}`);\n    }\n    create(employee) {\n      return this.http.post(`${environment.apiUrl}/employees`, employee);\n    }\n    update(id, employee) {\n      return this.http.put(`${environment.apiUrl}/employees/${id}`, employee);\n    }\n    delete(id) {\n      return this.http.delete(`${environment.apiUrl}/employees/${id}`);\n    }\n    transfer(employeeId, departmentId) {\n      if (!employeeId || !departmentId) {\n        throw new Error('Employee ID and department ID are required');\n      }\n      console.log('Transfer request:', {\n        employeeId,\n        newDepartmentId: departmentId\n      });\n      return this.http.post(`${environment.apiUrl}/employees/transfer`, {\n        employeeId: employeeId.toString(),\n        newDepartmentId: Number(departmentId)\n      });\n    }\n    static ɵfac = function EmployeeService_Factory(t) {\n      return new (t || EmployeeService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: EmployeeService,\n      factory: EmployeeService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return EmployeeService;\n})();","map":{"version":3,"mappings":"AAEA,SAASA,WAAW,QAAQ,2BAA2B;;;AAIvD,WAAaC,eAAe;EAAtB,MAAOA,eAAe;IACJC;IAApBC,YAAoBD,IAAgB;MAAhB,SAAI,GAAJA,IAAI;IAAe;IAEvCE,MAAM;MACF,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAa,GAAGL,WAAW,CAACM,MAAM,YAAY,CAAC;IACvE;IAEAC,OAAO,CAACC,EAAU;MACd,OAAO,IAAI,CAACN,IAAI,CAACG,GAAG,CAAW,GAAGL,WAAW,CAACM,MAAM,cAAcE,EAAE,EAAE,CAAC;IAC3E;IAEAC,MAAM,CAACC,QAAkB;MACrB,OAAO,IAAI,CAACR,IAAI,CAACS,IAAI,CAAC,GAAGX,WAAW,CAACM,MAAM,YAAY,EAAEI,QAAQ,CAAC;IACtE;IAEAE,MAAM,CAACJ,EAAU,EAAEE,QAAkB;MACjC,OAAO,IAAI,CAACR,IAAI,CAACW,GAAG,CAAC,GAAGb,WAAW,CAACM,MAAM,cAAcE,EAAE,EAAE,EAAEE,QAAQ,CAAC;IAC3E;IAEAI,MAAM,CAACN,EAAU;MACb,OAAO,IAAI,CAACN,IAAI,CAACY,MAAM,CAAC,GAAGd,WAAW,CAACM,MAAM,cAAcE,EAAE,EAAE,CAAC;IACpE;IAEAO,QAAQ,CAACC,UAAkB,EAAEC,YAAoB;MAC7C,IAAI,CAACD,UAAU,IAAI,CAACC,YAAY,EAAE;QAC9B,MAAM,IAAIC,KAAK,CAAC,4CAA4C,CAAC;;MAEjEC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAE;QAC7BJ,UAAU;QACVK,eAAe,EAAEJ;OACpB,CAAC;MACF,OAAO,IAAI,CAACf,IAAI,CAACS,IAAI,CAAM,GAAGX,WAAW,CAACM,MAAM,qBAAqB,EAAE;QACnEU,UAAU,EAAEA,UAAU,CAACM,QAAQ,EAAE;QACjCD,eAAe,EAAEE,MAAM,CAACN,YAAY;OACvC,CAAC;IACN;;uBAnCShB,eAAe;IAAA;;aAAfA,eAAe;MAAAuB,SAAfvB,eAAe;MAAAwB,YADF;IAAM;;SACnBxB,eAAe;AAAA","names":["environment","EmployeeService","http","constructor","getAll","get","apiUrl","getById","id","create","employee","post","update","put","delete","transfer","employeeId","departmentId","Error","console","log","newDepartmentId","toString","Number","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\CLARKKYYY\\Desktop\\final-project_intprog-main\\frontend\\src\\app\\_services\\employee.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from '@environments/environment';\r\nimport { Employee } from '@app/_models/employee';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class EmployeeService {\r\n    constructor(private http: HttpClient) {}\r\n\r\n    getAll() {\r\n        return this.http.get<Employee[]>(`${environment.apiUrl}/employees`);\r\n    }\r\n\r\n    getById(id: string) {\r\n        return this.http.get<Employee>(`${environment.apiUrl}/employees/${id}`);\r\n    }\r\n\r\n    create(employee: Employee) {\r\n        return this.http.post(`${environment.apiUrl}/employees`, employee);\r\n    }\r\n\r\n    update(id: string, employee: Employee) {\r\n        return this.http.put(`${environment.apiUrl}/employees/${id}`, employee);\r\n    }\r\n\r\n    delete(id: string) {\r\n        return this.http.delete(`${environment.apiUrl}/employees/${id}`);\r\n    }\r\n\r\n    transfer(employeeId: string, departmentId: number) {\r\n        if (!employeeId || !departmentId) {\r\n            throw new Error('Employee ID and department ID are required');\r\n        }\r\n        console.log('Transfer request:', { \r\n            employeeId, \r\n            newDepartmentId: departmentId \r\n        });\r\n        return this.http.post<any>(`${environment.apiUrl}/employees/transfer`, {\r\n            employeeId: employeeId.toString(),\r\n            newDepartmentId: Number(departmentId)\r\n        });\r\n    }\r\n} "]},"metadata":{},"sourceType":"module","externalDependencies":[]}