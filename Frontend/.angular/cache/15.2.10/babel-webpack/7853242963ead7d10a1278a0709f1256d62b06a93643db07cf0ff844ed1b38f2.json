{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@app/_services\";\nexport let ErrorInterceptor = /*#__PURE__*/(() => {\n  class ErrorInterceptor {\n    accountService;\n    isRefreshing = false;\n    constructor(accountService) {\n      this.accountService = accountService;\n    }\n    intercept(request, next) {\n      return next.handle(request).pipe(catchError(err => {\n        if (err.status === 401 && !request.url.includes('/refresh-token') && this.accountService.accountValue) {\n          if (!this.isRefreshing) {\n            this.isRefreshing = true;\n            return this.accountService.refreshToken().pipe(switchMap(() => {\n              this.isRefreshing = false;\n              // Retry the original request with the new token\n              return next.handle(request);\n            }), catchError(refreshError => {\n              this.isRefreshing = false;\n              // If refresh token fails, logout\n              this.accountService.logout();\n              return throwError(refreshError);\n            }));\n          }\n        }\n        if ([401, 403].includes(err.status) && this.accountService.accountValue) {\n          // auto logout if 401 or 403 response returned from api\n          this.accountService.logout();\n        }\n        const error = err.error?.message || err.statusText;\n        console.error(err);\n        return throwError(error);\n      }));\n    }\n    static ɵfac = function ErrorInterceptor_Factory(t) {\n      return new (t || ErrorInterceptor)(i0.ɵɵinject(i1.AccountService));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ErrorInterceptor,\n      factory: ErrorInterceptor.ɵfac\n    });\n  }\n  return ErrorInterceptor;\n})();","map":{"version":3,"mappings":"AAEA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,EAAEC,SAAS,QAAQ,gBAAgB;;;AAKtD,WAAaC,gBAAgB;EAAvB,MAAOA,gBAAgB;IAGLC;IAFZC,YAAY,GAAG,KAAK;IAE5BC,YAAoBF,cAA8B;MAA9B,mBAAc,GAAdA,cAAc;IAAoB;IAEtDG,SAAS,CAACC,OAAyB,EAAEC,IAAiB;MAClD,OAAOA,IAAI,CAACC,MAAM,CAACF,OAAO,CAAC,CAACG,IAAI,CAC5BV,UAAU,CAACW,GAAG,IAAG;QACb,IAAIA,GAAG,CAACC,MAAM,KAAK,GAAG,IAAI,CAACL,OAAO,CAACM,GAAG,CAACC,QAAQ,CAAC,gBAAgB,CAAC,IAAI,IAAI,CAACX,cAAc,CAACY,YAAY,EAAE;UACnG,IAAI,CAAC,IAAI,CAACX,YAAY,EAAE;YACpB,IAAI,CAACA,YAAY,GAAG,IAAI;YACxB,OAAO,IAAI,CAACD,cAAc,CAACa,YAAY,EAAE,CAACN,IAAI,CAC1CT,SAAS,CAAC,MAAK;cACX,IAAI,CAACG,YAAY,GAAG,KAAK;cACzB;cACA,OAAOI,IAAI,CAACC,MAAM,CAACF,OAAO,CAAC;YAC/B,CAAC,CAAC,EACFP,UAAU,CAACiB,YAAY,IAAG;cACtB,IAAI,CAACb,YAAY,GAAG,KAAK;cACzB;cACA,IAAI,CAACD,cAAc,CAACe,MAAM,EAAE;cAC5B,OAAOnB,UAAU,CAACkB,YAAY,CAAC;YACnC,CAAC,CAAC,CACL;;;QAIT,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAACH,QAAQ,CAACH,GAAG,CAACC,MAAM,CAAC,IAAI,IAAI,CAACT,cAAc,CAACY,YAAY,EAAE;UACrE;UACA,IAAI,CAACZ,cAAc,CAACe,MAAM,EAAE;;QAGhC,MAAMC,KAAK,GAAGR,GAAG,CAACQ,KAAK,EAAEC,OAAO,IAAIT,GAAG,CAACU,UAAU;QAClDC,OAAO,CAACH,KAAK,CAACR,GAAG,CAAC;QAClB,OAAOZ,UAAU,CAACoB,KAAK,CAAC;MAC5B,CAAC,CAAC,CACL;IACL;;uBArCSjB,gBAAgB;IAAA;;aAAhBA,gBAAgB;MAAAqB,SAAhBrB,gBAAgB;IAAA;;SAAhBA,gBAAgB;AAAA","names":["throwError","catchError","switchMap","ErrorInterceptor","accountService","isRefreshing","constructor","intercept","request","next","handle","pipe","err","status","url","includes","accountValue","refreshToken","refreshError","logout","error","message","statusText","console","factory"],"sourceRoot":"","sources":["C:\\Users\\CLARKKYYY\\Desktop\\final-project_intprog-main\\frontend\\src\\app\\_helpers\\error.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError, switchMap } from 'rxjs/operators';\r\n\r\nimport { AccountService } from '@app/_services';\r\n\r\n@Injectable()\r\nexport class ErrorInterceptor implements HttpInterceptor {\r\n    private isRefreshing = false;\r\n\r\n    constructor(private accountService: AccountService) { }\r\n\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        return next.handle(request).pipe(\r\n            catchError(err => {\r\n                if (err.status === 401 && !request.url.includes('/refresh-token') && this.accountService.accountValue) {\r\n                    if (!this.isRefreshing) {\r\n                        this.isRefreshing = true;\r\n                        return this.accountService.refreshToken().pipe(\r\n                            switchMap(() => {\r\n                                this.isRefreshing = false;\r\n                                // Retry the original request with the new token\r\n                                return next.handle(request);\r\n                            }),\r\n                            catchError(refreshError => {\r\n                                this.isRefreshing = false;\r\n                                // If refresh token fails, logout\r\n                                this.accountService.logout();\r\n                                return throwError(refreshError);\r\n                            })\r\n                        );\r\n                    }\r\n                }\r\n\r\n                if ([401, 403].includes(err.status) && this.accountService.accountValue) {\r\n                    // auto logout if 401 or 403 response returned from api\r\n                    this.accountService.logout();\r\n                }\r\n\r\n                const error = err.error?.message || err.statusText;\r\n                console.error(err);\r\n                return throwError(error);\r\n            })\r\n        );\r\n    }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}