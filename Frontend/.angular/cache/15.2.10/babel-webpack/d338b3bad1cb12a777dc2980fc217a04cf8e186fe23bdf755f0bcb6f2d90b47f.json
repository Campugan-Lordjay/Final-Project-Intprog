{"ast":null,"code":"import { HttpResponse, HTTP_INTERCEPTORS } from \"@angular/common/http\";\nimport { of, throwError } from \"rxjs\";\nimport { delay, materialize, dematerialize } from \"rxjs/operators\";\nimport { Role } from \"@app/_models\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@app/_services\";\n// array in local storage for accounts\nconst accountsKey = \"angular-18-signup-verification-boilerplate-accounts\";\nconst defaultAccounts = [{\n  id: 1,\n  title: \"Mr\",\n  firstName: \"Admin\",\n  lastName: \"User\",\n  email: \"admin@example.com\",\n  password: \"admin\",\n  role: \"Admin\",\n  isVerified: true,\n  refreshTokens: [],\n  employeeId: 1,\n  isActive: true\n}, {\n  id: 2,\n  title: \"Mr\",\n  firstName: \"Normal\",\n  lastName: \"User\",\n  email: \"user@example.com\",\n  password: \"user\",\n  role: \"User\",\n  isVerified: true,\n  refreshTokens: [],\n  employeeId: 2,\n  isActive: true\n}];\n// Clear localStorage accounts for testing purposes (remove in production)\nlocalStorage.removeItem(accountsKey);\n// Get accounts from localStorage or use defaults\nlet storedAccounts = JSON.parse(localStorage.getItem(accountsKey)) || [];\n// Ensure default accounts always exist\nlet accounts = storedAccounts;\nif (!accounts.some(x => x.email === \"admin@example.com\")) {\n  accounts.push(defaultAccounts[0]);\n}\nif (!accounts.some(x => x.email === \"user@example.com\")) {\n  accounts.push(defaultAccounts[1]);\n}\n// Update localStorage with the merged accounts\nlocalStorage.setItem(accountsKey, JSON.stringify(accounts));\n// arrays for employees, departments, workflows, and requests\nconst employeesKey = \"employees\";\nconst departmentsKey = \"departments\";\nconst workflowsKey = \"workflows\";\nconst requestsKey = \"requests\";\n// Define default departments first\nconst defaultDepartments = [{\n  id: 1,\n  name: \"Engineering\",\n  description: \"Software development team\",\n  employeeCount: 0 // Will be calculated based on employees\n}, {\n  id: 2,\n  name: \"Marketing\",\n  description: \"Marketing team\",\n  employeeCount: 0 // Will be calculated based on employees\n}];\n// Load or initialize departments\nlet departments = JSON.parse(localStorage.getItem(departmentsKey)) || defaultDepartments;\n// Default employees with correct department references\nconst defaultEmployees = [{\n  id: 1,\n  employeeId: \"EMP001\",\n  userId: 1,\n  position: \"Developer\",\n  departmentId: 1,\n  hireDate: \"2025-01-01\",\n  status: \"Active\"\n}, {\n  id: 2,\n  employeeId: \"EMP002\",\n  userId: 2,\n  position: \"Designer\",\n  departmentId: 1,\n  hireDate: \"2025-02-01\",\n  status: \"Active\"\n}];\n// Load or initialize employees\nlet employees = JSON.parse(localStorage.getItem(employeesKey)) || [];\n// Ensure default employees always exist by checking for their employee IDs\nif (!employees.some(e => e.employeeId === \"EMP001\")) {\n  employees.push(defaultEmployees[0]);\n}\nif (!employees.some(e => e.employeeId === \"EMP002\")) {\n  employees.push(defaultEmployees[1]);\n}\n// Save updated employees to localStorage\nlocalStorage.setItem(employeesKey, JSON.stringify(employees));\n// Calculate department counts based on employee distribution\nfunction updateDepartmentCounts() {\n  // Reset counts\n  departments.forEach(dept => {\n    dept.employeeCount = 0;\n  });\n  // Count employees in each department\n  employees.forEach(emp => {\n    if (emp.departmentId) {\n      const dept = departments.find(d => d.id === emp.departmentId);\n      if (dept) {\n        dept.employeeCount++;\n      }\n    }\n  });\n  // Save updated departments\n  localStorage.setItem(departmentsKey, JSON.stringify(departments));\n}\n// Perform initial count update\nupdateDepartmentCounts();\nlet workflows = JSON.parse(localStorage.getItem(workflowsKey)) || [{\n  id: 1,\n  employeeId: 1,\n  type: \"Onboarding\",\n  details: {\n    task: \"Setup workstation\"\n  },\n  status: \"Pending\"\n}];\nlet requests = JSON.parse(localStorage.getItem(requestsKey)) || [{\n  id: 1,\n  employeeId: 2,\n  type: \"Equipment\",\n  requestItems: [{\n    name: \"Laptop\",\n    quantity: 1\n  }],\n  status: \"Pending\"\n}];\nexport let FakeBackendInterceptor = /*#__PURE__*/(() => {\n  class FakeBackendInterceptor {\n    alertService;\n    constructor(alertService) {\n      this.alertService = alertService;\n    }\n    intercept(request, next) {\n      const {\n        url,\n        method,\n        headers,\n        body\n      } = request;\n      const alertService = this.alertService;\n      // Recalculate department employee counts based on employee data\n      recalculateDepartmentCounts();\n      return handleRoute();\n      // Helper function to recalculate and update department counts\n      function recalculateDepartmentCounts() {\n        // Reset all department counts to zero\n        departments.forEach(dept => {\n          dept.employeeCount = 0;\n        });\n        // Count employees in each department\n        employees.forEach(emp => {\n          if (emp.departmentId) {\n            const dept = departments.find(d => d.id === emp.departmentId);\n            if (dept) {\n              dept.employeeCount++;\n            }\n          }\n        });\n        // Save updated departments to localStorage\n        localStorage.setItem(departmentsKey, JSON.stringify(departments));\n      }\n      function handleRoute() {\n        console.log(`Handling route: ${url} (${method})`);\n        switch (true) {\n          case url.endsWith(\"/accounts/authenticate\") && method === \"POST\":\n            return authenticate();\n          case url.endsWith(\"/accounts/refresh-token\") && method === \"POST\":\n            return refreshToken();\n          case url.endsWith(\"/accounts/revoke-token\") && method === \"POST\":\n            return revokeToken();\n          case url.endsWith(\"/accounts/register\") && method === \"POST\":\n            return register();\n          case url.endsWith(\"/accounts/verify-email\") && method === \"POST\":\n            return verifyEmail();\n          case url.endsWith(\"/accounts/forgot-password\") && method === \"POST\":\n            return forgotPassword();\n          case url.endsWith(\"/accounts/validate-reset-token\") && method === \"POST\":\n            return validateResetToken();\n          case url.endsWith(\"/accounts/reset-password\") && method === \"POST\":\n            return resetPassword();\n          case url.endsWith(\"/accounts\") && method === \"GET\":\n            return getAccounts();\n          case url.endsWith(\"/accounts/active\") && method === \"GET\":\n            return getActiveAccounts();\n          case url.match(/\\/accounts\\/\\d+$/) && method === \"GET\":\n            return getAccountById();\n          case url.endsWith(\"/accounts\") && method === \"POST\":\n            return createAccount();\n          case url.match(/\\/accounts\\/\\d+$/) && method === \"PUT\":\n            return updateAccount();\n          case url.match(/\\/accounts\\/\\d+$/) && method === \"DELETE\":\n            return deleteAccount();\n          // Employee routes\n          case url.endsWith(\"/employees\") && method === \"GET\":\n            return getEmployees();\n          case url.endsWith(\"/employees\") && method === \"POST\":\n            return createEmployee();\n          case url.match(/\\/employees\\/\\d+$/) && method === \"GET\":\n            return getEmployeeById();\n          case url.match(/\\/employees\\/\\d+$/) && method === \"PUT\":\n            return updateEmployee();\n          case url.match(/\\/employees\\/\\d+$/) && method === \"DELETE\":\n            return deleteEmployee();\n          case url.match(/\\/employees\\/\\d+\\/transfer$/) && method === \"POST\":\n            console.log(\"Matched specific employee transfer route!\");\n            return transferEmployee();\n          case url.includes(\"/transfer\") && method === \"POST\":\n            console.log(\"Matched generic transfer route!\");\n            console.log(\"URL:\", url);\n            console.log(\"Method:\", method);\n            console.log(\"Body:\", body);\n            return transferEmployee();\n          // Department routes\n          case url.endsWith(\"/departments\") && method === \"GET\":\n            return getDepartments();\n          case url.endsWith(\"/departments/names\") && method === \"GET\":\n            console.log(\"Getting department names for dropdown\");\n            return ok(departments.map(d => ({\n              id: d.id,\n              name: d.name\n            })));\n          case url.match(/\\/departments\\/\\d+$/) && method === \"GET\":\n            return getDepartmentById();\n          case url.endsWith(\"/departments\") && method === \"POST\":\n            return createDepartment();\n          case url.match(/\\/departments\\/\\d+$/) && method === \"PUT\":\n            return updateDepartment();\n          case url.match(/\\/departments\\/\\d+$/) && method === \"DELETE\":\n            return deleteDepartment();\n          // Workflow routes\n          case url.match(/\\/workflows\\/employee\\/\\d+$/) && method === \"GET\":\n            return getEmployeeWorkflows();\n          case url.endsWith(\"/workflows\") && method === \"POST\":\n            return createWorkflow();\n          case url.match(/\\/workflows\\/\\d+$/) && method === \"PUT\":\n            return updateWorkflow();\n          case url.match(/\\/workflows\\/\\d+\\/status$/) && method === \"PUT\":\n            return updateWorkflowStatus();\n          // Request routes\n          case url.endsWith(\"/requests\") && method === \"GET\":\n            return getRequests();\n          case url.endsWith(\"/requests\") && method === \"POST\":\n            return createRequest();\n          case url.match(/\\/requests\\/\\d+$/) && method === \"PUT\":\n            return updateRequest();\n          case url.match(/\\/requests\\/\\d+$/) && method === \"DELETE\":\n            return deleteRequest();\n          case url.match(/\\/requests\\/\\d+$/) && method === \"GET\":\n            return getRequestById();\n          default:\n            // pass through any requests not handled above\n            return next.handle(request);\n        }\n      }\n      //route functions\n      function authenticate() {\n        const {\n          email,\n          password\n        } = body;\n        console.log(\"Attempting to authenticate:\", email);\n        const account = accounts.find(x => x.email === email && x.password === password && x.isVerified);\n        console.log(\"Found account:\", account);\n        if (!account) return error(\"Email or password is incorrect\");\n        // Check if account is active\n        if (account.isActive === false) {\n          return error(\"Your account is inactive. Please contact an administrator.\");\n        }\n        //add refresh token to account\n        account.refreshTokens.push(generateRefreshToken());\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok({\n          ...basicDetails(account),\n          jwtToken: generateJwtToken(account)\n        });\n      }\n      function refreshToken() {\n        const refreshToken = getRefreshToken();\n        if (!refreshToken) return unauthorized();\n        const account = accounts.find(x => x.refreshTokens.includes(refreshToken));\n        if (!account) return unauthorized();\n        //replace old refresh token with a new one and save\n        account.refreshTokens = account.refreshTokens.filter(x => x !== refreshToken);\n        account.refreshTokens.push(generateRefreshToken());\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok({\n          ...basicDetails(account),\n          jwtToken: generateJwtToken(account)\n        });\n      }\n      function revokeToken() {\n        if (!isAuthenticated()) return unauthorized();\n        const refreshToken = getRefreshToken();\n        const account = accounts.find(x => x.refreshTokens.includes(refreshToken));\n        //revoke token and save\n        account.refreshTokens = account.refreshTokens.filter(x => x !== refreshToken);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok();\n      }\n      function register() {\n        const account = body;\n        if (accounts.find(x => x.email === account.email)) {\n          //display email already registered \"email\" in alert\n          setTimeout(() => {\n            alertService.info(`\n              <h4>Email already registered</h4>\n              <p>Your email ${account.email} is already registered.</p>\n              <p>If you don't know your password please visit the <a href=\"${location.origin}/account/forgot-password\"> forgot password</a> page.</p>\n              <div><strong>Note:</strong> The fake backend displayed this \"email\" so you can test without an api. A real backend wound send a real email.</div>\n              `, {\n              autoClose: false\n            });\n          }, 1000);\n          //always return ok() response to prevent email enumeration\n        }\n        //assign account id and a few other properties then save\n        account.id = newAccountId();\n        if (account.id === 1) {\n          //first registered account is admin\n          account.role = Role.Admin;\n        } else {\n          account.role = Role.User;\n        }\n        account.dateCreated = new Date().toISOString();\n        account.verificationToken = new Date().getTime().toString();\n        account.isVerified = false;\n        account.refreshTokens = [];\n        delete account.confirmPassword;\n        accounts.push(account);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        //display verification email alert\n        setTimeout(() => {\n          const verifyUrl = `${location.origin}/account/verify-email?token=${account.verificationToken}`;\n          alertService.info(`\n          <h4>Verification email </h4>\n          <p>Thank you for registering. A verification email has been sent to your email address.</p>\n          <p>Please click the below link to verify your email address:</p>\n          <p><a href=\"${verifyUrl}\">${verifyUrl}</a></p>\n          <div><strong>Note:</strong> The fake backend displayed this \"email\" so you can test without an api. A real backend wound send a real email.</div>\n          `, {\n            autoClose: false\n          });\n        }, 1000);\n        return ok();\n      }\n      function verifyEmail() {\n        const {\n          token\n        } = body;\n        const account = accounts.find(x => !!x.verificationToken && x.verificationToken === token);\n        if (!account) return error(\"Invalid verification token\");\n        //set is verified flag to true if token is valid\n        account.isVerified = true;\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok();\n      }\n      function forgotPassword() {\n        const {\n          email\n        } = body;\n        const account = accounts.find(x => x.email === email);\n        //always return ok() response to prevent email enumeration\n        if (!account) return ok();\n        //create reset token that expires after 24 hours\n        account.resetToken = new Date().getTime().toString();\n        account.resetTokenExpires = new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString();\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        //display password reset email in alert\n        setTimeout(() => {\n          const resetUrl = `${location.origin}/account/reset-password?token=${account.resetToken}`;\n          alertService.info(`\n          <h4>Password reset email</h4>\n          <p>Please click the below link to reset your password:</p>\n          <p><a href=\"${resetUrl}\">${resetUrl}</a></p>\n          <div><strong>Note:</strong> The fake backend displayed this \"email\" so you can test without an api. A real backend wound send a real email.</div>\n          `, {\n            autoClose: false\n          });\n        }, 1000);\n        return ok();\n      }\n      function validateResetToken() {\n        const {\n          token\n        } = body;\n        const account = accounts.find(x => !!x.resetToken && x.resetToken === token && new Date() < new Date(x.resetTokenExpires));\n        if (!account) return error(\"Invalid token\");\n        return ok();\n      }\n      function resetPassword() {\n        const {\n          token,\n          password\n        } = body;\n        const account = accounts.find(x => !!x.resetToken && x.resetToken === token && new Date() < new Date(x.resetTokenExpires));\n        if (!account) return error(\"Invalid token\");\n        //update passsword and remove reset token\n        account.password = password;\n        account.isVerified = true;\n        delete account.resetToken;\n        delete account.resetTokenExpires;\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok();\n      }\n      function getAccounts() {\n        if (!isAuthenticated()) return unauthorized();\n        return ok(accounts.map(x => basicDetails(x)));\n      }\n      function getActiveAccounts() {\n        if (!isAuthenticated()) return unauthorized();\n        // Return only active accounts for dropdowns in employee forms\n        const activeAccounts = accounts.filter(acc => acc.isActive !== false).map(x => basicDetails(x));\n        return ok(activeAccounts);\n      }\n      function getAccountById() {\n        if (!isAuthenticated()) return unauthorized();\n        let account = accounts.find(x => x.id === idFromUrl());\n        //user account can get own profile and admin account can get all profies\n        if (account.id !== currentAccount().id && !isAuthorized(Role.Admin)) {\n          return unauthorized();\n        }\n        return ok(basicDetails(account));\n      }\n      function createAccount() {\n        if (!isAuthorized(Role.Admin)) return unauthorized();\n        const account = body;\n        if (accounts.find(x => x.email === account.email)) {\n          return error(`Email \"${account.email}\" is already registered`);\n        }\n        //assign account id and a few other properties then save\n        account.id = newAccountId();\n        account.dateCreated = new Date().toISOString();\n        account.isVerified = false;\n        account.refreshTokens = [];\n        // Set isActive to true by default if not specified\n        account.isActive = account.isActive !== undefined ? account.isActive : true;\n        accounts.push(account);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok();\n      }\n      function updateAccount() {\n        if (!isAuthenticated()) return unauthorized();\n        let params = body;\n        let account = accounts.find(x => x.id === idFromUrl());\n        //user accounts can update own profile and admin accounts can update all profiles\n        if (account.id !== currentAccount().id && !isAuthorized(Role.Admin)) {\n          return unauthorized();\n        }\n        //only update password if included\n        if (!params.password) {\n          delete params.password;\n        }\n        //don't save confirm password\n        delete params.confirmPassword;\n        //update and save account\n        Object.assign(account, params);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok(basicDetails(account));\n      }\n      function deleteAccount() {\n        if (!isAuthenticated()) return unauthorized();\n        let account = accounts.find(x => x.id === idFromUrl());\n        //user accounts can delete own account and admin account can delete any account\n        if (account.id !== currentAccount().id && !isAuthorized(Role.Admin)) {\n          return unauthorized();\n        }\n        //delete account and save\n        accounts = accounts.filter(x => x.id !== idFromUrl());\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok();\n      }\n      // Employee functions\n      function getEmployees() {\n        if (!isAuthenticated()) return unauthorized();\n        // Return employees with department and account information for display\n        const enrichedEmployees = employees.map(employee => {\n          const department = departments.find(d => d.id === employee.departmentId);\n          const account = accounts.find(a => a.id === employee.userId);\n          return {\n            ...employee,\n            departmentName: department ? department.name : \"Unknown Department\",\n            accountName: account ? `${account.firstName} ${account.lastName}` : \"Unknown Account\"\n          };\n        });\n        return ok(enrichedEmployees);\n      }\n      function createEmployee() {\n        if (!isAuthorized(Role.Admin)) return unauthorized();\n        const employee = {\n          id: employees.length ? Math.max(...employees.map(x => x.id)) + 1 : 1,\n          ...body\n        };\n        employees.push(employee);\n        localStorage.setItem(employeesKey, JSON.stringify(employees));\n        // Recalculate department counts after adding an employee\n        recalculateDepartmentCounts();\n        return ok(employee);\n      }\n      function getEmployeeById() {\n        if (!isAuthenticated()) return unauthorized();\n        const id = idFromUrl();\n        const employee = employees.find(e => e.id === id);\n        if (!employee) return error(\"Employee not found\");\n        // Add referenced entities for dropdown selection in forms\n        const department = departments.find(d => d.id === employee.departmentId);\n        const account = accounts.find(a => a.id === employee.userId);\n        const enrichedEmployee = {\n          ...employee,\n          departmentName: department ? department.name : \"Unknown Department\",\n          accountName: account ? `${account.firstName} ${account.lastName}` : \"Unknown Account\"\n        };\n        return ok(enrichedEmployee);\n      }\n      function updateEmployee() {\n        if (!isAuthorized(Role.Admin)) return unauthorized();\n        const id = idFromUrl();\n        const employeeIndex = employees.findIndex(e => e.id === id);\n        if (employeeIndex === -1) return error(\"Employee not found\");\n        // Store old department ID to check if it changed\n        const oldDepartmentId = employees[employeeIndex].departmentId;\n        const newDepartmentId = body.departmentId;\n        employees[employeeIndex] = {\n          ...employees[employeeIndex],\n          ...body\n        };\n        localStorage.setItem(employeesKey, JSON.stringify(employees));\n        // Recalculate department counts if department changed\n        if (oldDepartmentId !== newDepartmentId) {\n          recalculateDepartmentCounts();\n        }\n        return ok(employees[employeeIndex]);\n      }\n      function deleteEmployee() {\n        if (!isAuthorized(Role.Admin)) return unauthorized();\n        const id = idFromUrl();\n        if (!employees.find(e => e.id === id)) return error(\"Employee not found\");\n        employees = employees.filter(e => e.id !== id);\n        localStorage.setItem(employeesKey, JSON.stringify(employees));\n        // Recalculate department counts after removing an employee\n        recalculateDepartmentCounts();\n        return ok({\n          message: \"Employee deleted\"\n        });\n      }\n      function transferEmployee() {\n        if (!isAuthorized(Role.Admin)) return unauthorized();\n        // Get the employee ID from the URL correctly\n        // The URL format is like /employees/123/transfer, so we need to extract '123'\n        const urlParts = url.split(\"/\");\n        console.log(\"Transfer URL parts:\", urlParts);\n        // Find the 'employees' part and take the next segment as ID\n        let employeeIdIndex = -1;\n        for (let i = 0; i < urlParts.length; i++) {\n          if (urlParts[i] === \"employees\") {\n            employeeIdIndex = i + 1;\n            break;\n          }\n        }\n        if (employeeIdIndex === -1 || employeeIdIndex >= urlParts.length) {\n          console.error(\"Invalid URL format for employee transfer\");\n          return error(\"Invalid URL format\");\n        }\n        const id = parseInt(urlParts[employeeIdIndex]);\n        console.log(\"Attempting to transfer employee with ID:\", id);\n        // Log all employees for debugging\n        console.log(\"Available employees:\", employees.map(e => ({\n          id: e.id,\n          employeeId: e.employeeId\n        })));\n        const employee = employees.find(e => e.id === id);\n        console.log(\"Found employee:\", employee);\n        if (!employee) return error(\"Employee not found\");\n        // Log the entire body to debug\n        console.log(\"Request body for transfer:\", body);\n        // Extract department ID directly from the request\n        let targetDepartmentId = null;\n        if (body.departmentId) {\n          targetDepartmentId = Number(body.departmentId);\n        } else if (body.department && body.department.id) {\n          targetDepartmentId = Number(body.department.id);\n        } else if (body.department) {\n          targetDepartmentId = Number(body.department);\n        } else if (body.targetDepartment) {\n          targetDepartmentId = Number(body.targetDepartment);\n        } else if (body.id) {\n          targetDepartmentId = Number(body.id);\n        }\n        console.log(\"Extracted target department ID:\", targetDepartmentId);\n        if (!targetDepartmentId) {\n          return error(\"Target department not specified\");\n        }\n        // Find the target department\n        const targetDepartment = departments.find(d => d.id === targetDepartmentId);\n        console.log(\"Target department:\", targetDepartment);\n        if (!targetDepartment) {\n          // Log all departments for debugging\n          console.log(\"Available departments:\", departments);\n          return error(`Target department with ID ${targetDepartmentId} not found`);\n        }\n        // Create a workflow for the transfer\n        const account = currentAccount();\n        const workflow = {\n          id: workflows.length ? Math.max(...workflows.map(w => w.id)) + 1 : 1,\n          employeeId: employee.id,\n          type: \"Department Transfer\",\n          details: {\n            employeeId: employee.id,\n            employeeName: employee.employeeId,\n            currentDepartment: departments.find(d => d.id === employee.departmentId)?.name || \"None\",\n            newDepartment: targetDepartment.name,\n            newDepartmentId: targetDepartmentId,\n            requestedBy: `${account.firstName} ${account.lastName}`,\n            requestedAt: new Date().toISOString()\n          },\n          status: \"Pending\"\n        };\n        workflows.push(workflow);\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        console.log(\"Created department transfer workflow:\", workflow);\n        return ok({\n          employee,\n          workflow,\n          message: \"Transfer request has been created and is pending approval.\"\n        });\n      }\n      // Department functions\n      function getDepartments() {\n        if (!isAuthenticated()) return unauthorized();\n        return ok(departments);\n      }\n      function getDepartmentById() {\n        if (!isAuthenticated()) return unauthorized();\n        const id = idFromUrl();\n        const department = departments.find(d => d.id === id);\n        if (!department) return error(\"Department not found\");\n        return ok(department);\n      }\n      function createDepartment() {\n        if (!isAuthorized(Role.Admin)) return unauthorized();\n        const department = {\n          id: departments.length ? Math.max(...departments.map(d => d.id)) + 1 : 1,\n          ...body,\n          employeeCount: 0\n        };\n        departments.push(department);\n        localStorage.setItem(departmentsKey, JSON.stringify(departments));\n        return ok(department);\n      }\n      function updateDepartment() {\n        if (!isAuthorized(Role.Admin)) return unauthorized();\n        const id = idFromUrl();\n        const deptIndex = departments.findIndex(d => d.id === id);\n        if (deptIndex === -1) return error(\"Department not found\");\n        departments[deptIndex] = {\n          ...departments[deptIndex],\n          ...body,\n          employeeCount: departments[deptIndex].employeeCount\n        };\n        localStorage.setItem(departmentsKey, JSON.stringify(departments));\n        return ok(departments[deptIndex]);\n      }\n      function deleteDepartment() {\n        if (!isAuthorized(Role.Admin)) return unauthorized();\n        const id = idFromUrl();\n        if (!departments.find(d => d.id === id)) return error(\"Department not found\");\n        departments = departments.filter(d => d.id !== id);\n        localStorage.setItem(departmentsKey, JSON.stringify(departments));\n        return ok({\n          message: \"Department deleted\"\n        });\n      }\n      // Workflow functions\n      function getEmployeeWorkflows() {\n        if (!isAuthenticated()) return unauthorized();\n        const employeeId = parseInt(url.split(\"/\").pop());\n        const employeeWorkflows = workflows.filter(w => w.employeeId === employeeId);\n        return ok(employeeWorkflows);\n      }\n      function createWorkflow() {\n        if (!isAuthorized(Role.Admin)) return unauthorized();\n        const workflow = {\n          id: workflows.length ? Math.max(...workflows.map(w => w.id)) + 1 : 1,\n          ...body\n        };\n        workflows.push(workflow);\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(workflow);\n      }\n      function updateWorkflow() {\n        if (!isAuthorized(Role.Admin)) return unauthorized();\n        const id = idFromUrl();\n        const workflowIndex = workflows.findIndex(w => w.id === id);\n        if (workflowIndex === -1) return error(\"Workflow not found\");\n        // Create the updated workflow object based on existing and new data\n        const updatedWorkflow = {\n          ...workflows[workflowIndex],\n          ...body // body contains the new status and other workflow properties\n        };\n        // Check if the status is being updated to Approved or Rejected\n        if (updatedWorkflow.status === \"Approved\" || updatedWorkflow.status === \"Rejected\") {\n          // Update the corresponding request status if this is a request approval workflow\n          if (updatedWorkflow.type === \"Request Approval\" && updatedWorkflow.details && updatedWorkflow.details.requestId) {\n            const requestId = updatedWorkflow.details.requestId;\n            const requestIndex = requests.findIndex(r => r.id === requestId);\n            if (requestIndex !== -1) {\n              // Update the request status to match the workflow status\n              requests[requestIndex].status = updatedWorkflow.status;\n              localStorage.setItem(requestsKey, JSON.stringify(requests));\n              console.log(`Updated request ${requestId} status to ${updatedWorkflow.status}`);\n            }\n          }\n          // Handle department transfer logic if it's an approved department transfer\n          if (updatedWorkflow.type === \"Department Transfer\" && updatedWorkflow.status === \"Approved\") {\n            const employeeId = updatedWorkflow.employeeId;\n            const employee = employees.find(e => e.id === employeeId);\n            if (employee && updatedWorkflow.details) {\n              // Get new department ID from workflow details\n              const newDepartmentId = updatedWorkflow.details.newDepartmentId;\n              if (newDepartmentId) {\n                // Use department ID directly if available\n                employee.departmentId = newDepartmentId;\n                localStorage.setItem(employeesKey, JSON.stringify(employees));\n                // Recalculate department counts after the transfer\n                recalculateDepartmentCounts();\n                console.log(`Employee ${employeeId} transferred to department ID ${newDepartmentId} via workflow update`);\n              } else if (updatedWorkflow.details.newDepartment) {\n                // Fallback to department name lookup\n                const newDepartmentName = updatedWorkflow.details.newDepartment;\n                const newDepartment = departments.find(d => d.name === newDepartmentName);\n                if (newDepartment) {\n                  // Update employee's department\n                  employee.departmentId = newDepartment.id;\n                  localStorage.setItem(employeesKey, JSON.stringify(employees));\n                  // Recalculate department counts after the transfer\n                  recalculateDepartmentCounts();\n                  console.log(`Employee ${employeeId} transferred to department ${newDepartmentName} via workflow update`);\n                }\n              }\n            }\n          }\n        }\n        // Always update the workflow in place, regardless of status\n        workflows[workflowIndex] = updatedWorkflow;\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        // Return the workflow object that was processed\n        return ok(updatedWorkflow);\n      }\n      function updateWorkflowStatus() {\n        if (!isAuthorized(Role.Admin)) return unauthorized();\n        const id = idFromUrl();\n        const workflowIndex = workflows.findIndex(w => w.id === id);\n        if (workflowIndex === -1) return error(\"Workflow not found\");\n        const workflow = workflows[workflowIndex];\n        const newStatus = body.status;\n        // Update the corresponding request if this is a request approval workflow\n        if (workflow.type === \"Request Approval\" && workflow.details && workflow.details.requestId) {\n          const requestId = workflow.details.requestId;\n          const requestIndex = requests.findIndex(r => r.id === requestId);\n          if (requestIndex !== -1) {\n            // Update the request status to match the workflow status\n            requests[requestIndex].status = newStatus;\n            localStorage.setItem(requestsKey, JSON.stringify(requests));\n            console.log(`Updated request ${requestId} status to ${newStatus}`);\n          }\n        }\n        // Handle department transfer when approved\n        if (workflow.type === \"Department Transfer\" && newStatus === \"Approved\") {\n          const employeeId = workflow.employeeId;\n          const employee = employees.find(e => e.id === employeeId);\n          if (employee && workflow.details) {\n            // Get new department ID from workflow details\n            const newDepartmentId = workflow.details.newDepartmentId;\n            if (newDepartmentId) {\n              // Use department ID directly if available\n              employee.departmentId = newDepartmentId;\n              localStorage.setItem(employeesKey, JSON.stringify(employees));\n              // Recalculate department counts after the transfer\n              recalculateDepartmentCounts();\n              console.log(`Employee ${employeeId} transferred to department ID ${newDepartmentId}`);\n            } else if (workflow.details.newDepartment) {\n              // Fallback to department name lookup\n              const newDepartmentName = workflow.details.newDepartment;\n              const newDepartment = departments.find(d => d.name === newDepartmentName);\n              if (newDepartment) {\n                employee.departmentId = newDepartment.id;\n                localStorage.setItem(employeesKey, JSON.stringify(employees));\n                // Recalculate department counts after the transfer\n                recalculateDepartmentCounts();\n                console.log(`Employee ${employeeId} transferred to department ${newDepartmentName}`);\n              }\n            }\n          }\n        }\n        // Update workflow status\n        workflow.status = newStatus;\n        // Always keep the workflow in the list and update it\n        workflows[workflowIndex] = workflow;\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(workflow);\n      }\n      // Request functions\n      function getRequests() {\n        if (!isAuthenticated()) return unauthorized(); // All authenticated users can attempt to get requests\n        const acc = currentAccount();\n        if (!acc) return unauthorized(); // Should be caught by isAuthenticated, but good practice\n        if (acc.role === Role.Admin) {\n          // Admin sees all requests\n          return ok(requests);\n        } else {\n          // Regular user sees only their own requests\n          const currentUserEmployee = employees.find(e => e.userId === acc.id);\n          if (!currentUserEmployee) {\n            // If the user is not linked to an employee record, they have no requests\n            return ok([]);\n          }\n          const userRequests = requests.filter(r => r.employeeId === currentUserEmployee.id);\n          return ok(userRequests);\n        }\n      }\n      function createRequest() {\n        if (!isAuthenticated()) return unauthorized();\n        const account = currentAccount();\n        // Convert employeeId to number if it exists (fix for type mismatch)\n        if (body.employeeId) {\n          body.employeeId = Number(body.employeeId);\n        }\n        // Only set default employeeId if not provided in request and user is not admin\n        if (!body.employeeId) {\n          // For both admin and non-admin, if employeeId is not set, use the current user's employee record\n          const employee = employees.find(e => e.userId === account.id);\n          if (employee) {\n            body.employeeId = employee.id;\n          } else if (account.role !== Role.Admin) {\n            // Only error for non-admin users - admins can create requests without employee association\n            return error(\"Employee not found for current user\");\n          }\n        }\n        // Create a deep copy of the request body to avoid reference issues\n        const requestData = JSON.parse(JSON.stringify(body));\n        const request = {\n          id: requests.length ? Math.max(...requests.map(r => r.id)) + 1 : 1,\n          ...requestData\n        };\n        console.log(\"Creating new request:\", request);\n        requests.push(request);\n        localStorage.setItem(requestsKey, JSON.stringify(requests));\n        // Create a corresponding workflow for this request\n        if (request.employeeId) {\n          const employee = employees.find(e => e.id === request.employeeId);\n          if (employee) {\n            const workflow = {\n              id: workflows.length ? Math.max(...workflows.map(w => w.id)) + 1 : 1,\n              employeeId: request.employeeId,\n              type: \"Request Approval\",\n              details: {\n                requestId: request.id,\n                requestType: request.type,\n                requestItems: JSON.parse(JSON.stringify(request.requestItems)),\n                createdBy: `${account.firstName} ${account.lastName}`,\n                createdAt: new Date().toISOString()\n              },\n              status: \"Pending\"\n            };\n            workflows.push(workflow);\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n            console.log(\"Created workflow for request:\", workflow);\n          }\n        }\n        return ok(request);\n      }\n      function updateRequest() {\n        if (!isAuthorized(Role.Admin)) return unauthorized();\n        const id = idFromUrl();\n        const reqIndex = requests.findIndex(r => r.id === id);\n        if (reqIndex === -1) return error(\"Request not found\");\n        // Convert employeeId to number if it exists (fix for type mismatch)\n        if (body.employeeId) {\n          body.employeeId = Number(body.employeeId);\n        }\n        // Create a deep copy of the request body to avoid reference issues\n        const requestData = JSON.parse(JSON.stringify(body));\n        const oldRequest = requests[reqIndex];\n        const updatedRequest = {\n          ...oldRequest,\n          ...requestData\n        };\n        requests[reqIndex] = updatedRequest;\n        console.log(\"Updated request:\", updatedRequest);\n        localStorage.setItem(requestsKey, JSON.stringify(requests));\n        // Update the corresponding workflow if it exists\n        // If status has changed, update workflow status accordingly\n        const account = currentAccount();\n        const relatedWorkflows = workflows.filter(w => w.type === \"Request Approval\" && w.details && w.details.requestId === id);\n        if (relatedWorkflows.length > 0) {\n          // Update existing workflow\n          relatedWorkflows.forEach(workflow => {\n            workflow.details.requestType = updatedRequest.type;\n            workflow.details.requestItems = JSON.parse(JSON.stringify(updatedRequest.requestItems));\n            workflow.details.updatedBy = `${account.firstName} ${account.lastName}`;\n            workflow.details.updatedAt = new Date().toISOString();\n            // If request status was updated, reflect in workflow\n            if (oldRequest.status !== updatedRequest.status) {\n              if (updatedRequest.status === \"Approved\") {\n                workflow.status = \"Approved\";\n              } else if (updatedRequest.status === \"Rejected\") {\n                workflow.status = \"Rejected\";\n              }\n            }\n          });\n        } else if (updatedRequest.employeeId) {\n          // No existing workflow found, create a new one\n          const employee = employees.find(e => e.id === updatedRequest.employeeId);\n          if (employee) {\n            const workflow = {\n              id: workflows.length ? Math.max(...workflows.map(w => w.id)) + 1 : 1,\n              employeeId: updatedRequest.employeeId,\n              type: \"Request Approval\",\n              details: {\n                requestId: updatedRequest.id,\n                requestType: updatedRequest.type,\n                requestItems: JSON.parse(JSON.stringify(updatedRequest.requestItems)),\n                createdBy: `${account.firstName} ${account.lastName}`,\n                createdAt: new Date().toISOString()\n              },\n              status: \"Pending\"\n            };\n            workflows.push(workflow);\n            console.log(\"Created workflow for updated request:\", workflow);\n          }\n        }\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(updatedRequest);\n      }\n      function deleteRequest() {\n        if (!isAuthorized(Role.Admin)) return unauthorized();\n        const id = idFromUrl();\n        if (!requests.find(r => r.id === id)) return error(\"Request not found\");\n        requests = requests.filter(r => r.id !== id);\n        localStorage.setItem(requestsKey, JSON.stringify(requests));\n        return ok({\n          message: \"Request deleted\"\n        });\n      }\n      function getRequestById() {\n        if (!isAuthenticated()) return unauthorized();\n        console.log(\"Getting request by ID\");\n        const id = idFromUrl();\n        console.log(\"Request ID from URL:\", id);\n        const request = requests.find(r => r.id === id);\n        console.log(\"Found request:\", request);\n        if (!request) return error(\"Request not found\");\n        // Important: Create a deep copy of the request to avoid reference issues\n        const requestCopy = JSON.parse(JSON.stringify(request));\n        console.log(\"Returning request copy:\", requestCopy);\n        return ok(requestCopy);\n      }\n      //helper functions\n      function ok(body) {\n        return of(new HttpResponse({\n          status: 200,\n          body\n        })).pipe(delay(500)); //delay observalbe to simulate server api call\n      }\n\n      function error(message) {\n        return throwError({\n          error: {\n            message\n          }\n        }).pipe(materialize(), delay(500), dematerialize());\n        // call materialize and dematerialize to ensure delay even if an error is thrown\n      }\n\n      function unauthorized() {\n        return throwError({\n          status: 401,\n          error: {\n            message: \"Unauthorized\"\n          }\n        }).pipe(materialize(), delay(500), dematerialize());\n      }\n      function basicDetails(account) {\n        const {\n          id,\n          title,\n          firstName,\n          lastName,\n          email,\n          role,\n          dateCreated,\n          isVerified,\n          isActive\n        } = account;\n        return {\n          id,\n          title,\n          firstName,\n          lastName,\n          email,\n          role,\n          dateCreated,\n          isVerified,\n          isActive: isActive !== undefined ? isActive : true // Ensure isActive has a default value\n        };\n      }\n\n      function isAuthenticated() {\n        return !!currentAccount();\n      }\n      function isAuthorized(role) {\n        const account = currentAccount();\n        if (!account) return false;\n        return account.role === role;\n      }\n      function idFromUrl() {\n        const urlParts = url.split(\"/\");\n        const id = parseInt(urlParts[urlParts.length - 1]);\n        console.log(\"URL parts:\", urlParts, \"Extracted ID:\", id);\n        return id;\n      }\n      function newAccountId() {\n        //create random id for new account\n        return accounts.length ? Math.max(...accounts.map(x => x.id)) + 1 : 1;\n      }\n      function currentAccount() {\n        //check if jwt token is in auth header\n        const authHeader = headers.get(\"Authorization\");\n        if (!authHeader.startsWith(\"Bearer fake-jwt-token\")) return;\n        //check if token is expired\n        const jwtToken = JSON.parse(atob(authHeader.split(\".\")[1]));\n        const tokenExpired = Date.now() > jwtToken.exp * 1000;\n        if (tokenExpired) return;\n        const account = accounts.find(x => x.id === jwtToken.id);\n        return account;\n      }\n      function generateJwtToken(account) {\n        //create token that expires in 15 minutes\n        const tokenPayLoad = {\n          exp: Math.round(new Date(Date.now() + 15 * 60 * 1000).getTime() / 1000),\n          id: account.id\n        };\n        return `fake-jwt-token.${btoa(JSON.stringify(tokenPayLoad))}`;\n      }\n      function generateRefreshToken() {\n        const token = new Date().getTime().toString();\n        //add token cookie that expires in 7days\n        const expires = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toUTCString();\n        document.cookie = `fakeRefreshToken=${token}; expires=${expires}; path=/`;\n        return token;\n      }\n      function getRefreshToken() {\n        //get refresh token from cookei\n        return (document.cookie.split(\";\").find(x => x.includes(`fakeRefreshToken`)) || \"=\").split(\"=\")[1];\n      }\n    }\n    static ɵfac = function FakeBackendInterceptor_Factory(t) {\n      return new (t || FakeBackendInterceptor)(i0.ɵɵinject(i1.AlertService));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: FakeBackendInterceptor,\n      factory: FakeBackendInterceptor.ɵfac\n    });\n  }\n  return FakeBackendInterceptor;\n})();\nexport let fakeBackendProvider = {\n  //use fake backend in place of Http service for backend-less development\n  provide: HTTP_INTERCEPTORS,\n  useClass: FakeBackendInterceptor,\n  multi: true\n};","map":{"version":3,"mappings":"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","names":["HttpResponse","HTTP_INTERCEPTORS","of","throwError","delay","materialize","dematerialize","Role","accountsKey","defaultAccounts","id","title","firstName","lastName","email","password","role","isVerified","refreshTokens","employeeId","isActive","localStorage","removeItem","storedAccounts","JSON","parse","getItem","accounts","some","x","push","setItem","stringify","employeesKey","departmentsKey","workflowsKey","requestsKey","defaultDepartments","name","description","employeeCount","departments","defaultEmployees","userId","position","departmentId","hireDate","status","employees","e","updateDepartmentCounts","forEach","dept","emp","find","d","workflows","type","details","task","requests","requestItems","quantity","FakeBackendInterceptor","alertService","constructor","intercept","request","next","url","method","headers","body","recalculateDepartmentCounts","handleRoute","console","log","endsWith","authenticate","refreshToken","revokeToken","register","verifyEmail","forgotPassword","validateResetToken","resetPassword","getAccounts","getActiveAccounts","match","getAccountById","createAccount","updateAccount","deleteAccount","getEmployees","createEmployee","getEmployeeById","updateEmployee","deleteEmployee","transferEmployee","includes","getDepartments","ok","map","getDepartmentById","createDepartment","updateDepartment","deleteDepartment","getEmployeeWorkflows","createWorkflow","updateWorkflow","updateWorkflowStatus","getRequests","createRequest","updateRequest","deleteRequest","getRequestById","handle","account","error","generateRefreshToken","basicDetails","jwtToken","generateJwtToken","getRefreshToken","unauthorized","filter","isAuthenticated","setTimeout","info","location","origin","autoClose","newAccountId","Admin","User","dateCreated","Date","toISOString","verificationToken","getTime","toString","confirmPassword","verifyUrl","token","resetToken","resetTokenExpires","now","resetUrl","activeAccounts","acc","idFromUrl","currentAccount","isAuthorized","undefined","params","Object","assign","enrichedEmployees","employee","department","a","departmentName","accountName","length","Math","max","enrichedEmployee","employeeIndex","findIndex","oldDepartmentId","newDepartmentId","message","urlParts","split","employeeIdIndex","i","parseInt","targetDepartmentId","Number","targetDepartment","workflow","w","employeeName","currentDepartment","newDepartment","requestedBy","requestedAt","deptIndex","pop","employeeWorkflows","workflowIndex","updatedWorkflow","requestId","requestIndex","r","newDepartmentName","newStatus","currentUserEmployee","userRequests","requestData","requestType","createdBy","createdAt","reqIndex","oldRequest","updatedRequest","relatedWorkflows","updatedBy","updatedAt","requestCopy","pipe","authHeader","get","startsWith","atob","tokenExpired","exp","tokenPayLoad","round","btoa","expires","toUTCString","document","cookie","factory","fakeBackendProvider","provide","useClass","multi"],"sourceRoot":"","sources":["C:\\Users\\watss\\Documents\\School\\magsayo\\Final-Project-Intprog\\Frontend\\src\\app\\_helpers\\fake-backend.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport {\r\n  HttpRequest,\r\n  HttpResponse,\r\n  HttpHandler,\r\n  HttpEvent,\r\n  HttpInterceptor,\r\n  HTTP_INTERCEPTORS,\r\n  HttpHeaders,\r\n} from \"@angular/common/http\";\r\nimport { Observable, of, throwError } from \"rxjs\";\r\nimport { delay, materialize, dematerialize, mergeMap } from \"rxjs/operators\";\r\n\r\nimport { AlertService } from \"@app/_services\";\r\nimport { Role } from \"@app/_models\";\r\n\r\n// array in local storage for accounts\r\nconst accountsKey = \"angular-18-signup-verification-boilerplate-accounts\";\r\nconst defaultAccounts = [\r\n  {\r\n    id: 1,\r\n    title: \"Mr\",\r\n    firstName: \"Admin\",\r\n    lastName: \"User\",\r\n    email: \"admin@example.com\",\r\n    password: \"admin\",\r\n    role: \"Admin\",\r\n    isVerified: true,\r\n    refreshTokens: [],\r\n    employeeId: 1,\r\n    isActive: true,\r\n  },\r\n  {\r\n    id: 2,\r\n    title: \"Mr\",\r\n    firstName: \"Normal\",\r\n    lastName: \"User\",\r\n    email: \"user@example.com\",\r\n    password: \"user\",\r\n    role: \"User\",\r\n    isVerified: true,\r\n    refreshTokens: [],\r\n    employeeId: 2,\r\n    isActive: true,\r\n  },\r\n];\r\n\r\n// Clear localStorage accounts for testing purposes (remove in production)\r\nlocalStorage.removeItem(accountsKey);\r\n\r\n// Get accounts from localStorage or use defaults\r\nlet storedAccounts = JSON.parse(localStorage.getItem(accountsKey)) || [];\r\n// Ensure default accounts always exist\r\nlet accounts = storedAccounts;\r\nif (!accounts.some((x) => x.email === \"admin@example.com\")) {\r\n  accounts.push(defaultAccounts[0]);\r\n}\r\nif (!accounts.some((x) => x.email === \"user@example.com\")) {\r\n  accounts.push(defaultAccounts[1]);\r\n}\r\n// Update localStorage with the merged accounts\r\nlocalStorage.setItem(accountsKey, JSON.stringify(accounts));\r\n\r\n// arrays for employees, departments, workflows, and requests\r\nconst employeesKey = \"employees\";\r\nconst departmentsKey = \"departments\";\r\nconst workflowsKey = \"workflows\";\r\nconst requestsKey = \"requests\";\r\n\r\n// Define default departments first\r\nconst defaultDepartments = [\r\n  {\r\n    id: 1,\r\n    name: \"Engineering\",\r\n    description: \"Software development team\",\r\n    employeeCount: 0, // Will be calculated based on employees\r\n  },\r\n  {\r\n    id: 2,\r\n    name: \"Marketing\",\r\n    description: \"Marketing team\",\r\n    employeeCount: 0, // Will be calculated based on employees\r\n  },\r\n];\r\n\r\n// Load or initialize departments\r\nlet departments =\r\n  JSON.parse(localStorage.getItem(departmentsKey)) || defaultDepartments;\r\n\r\n// Default employees with correct department references\r\nconst defaultEmployees = [\r\n  {\r\n    id: 1,\r\n    employeeId: \"EMP001\",\r\n    userId: 1,\r\n    position: \"Developer\",\r\n    departmentId: 1, // Engineering\r\n    hireDate: \"2025-01-01\",\r\n    status: \"Active\",\r\n  },\r\n  {\r\n    id: 2,\r\n    employeeId: \"EMP002\",\r\n    userId: 2,\r\n    position: \"Designer\",\r\n    departmentId: 1, // Engineering -\r\n    hireDate: \"2025-02-01\",\r\n    status: \"Active\",\r\n  },\r\n];\r\n\r\n// Load or initialize employees\r\nlet employees = JSON.parse(localStorage.getItem(employeesKey)) || [];\r\n\r\n// Ensure default employees always exist by checking for their employee IDs\r\nif (!employees.some((e) => e.employeeId === \"EMP001\")) {\r\n  employees.push(defaultEmployees[0]);\r\n}\r\nif (!employees.some((e) => e.employeeId === \"EMP002\")) {\r\n  employees.push(defaultEmployees[1]);\r\n}\r\n\r\n// Save updated employees to localStorage\r\nlocalStorage.setItem(employeesKey, JSON.stringify(employees));\r\n\r\n// Calculate department counts based on employee distribution\r\nfunction updateDepartmentCounts() {\r\n  // Reset counts\r\n  departments.forEach((dept) => {\r\n    dept.employeeCount = 0;\r\n  });\r\n\r\n  // Count employees in each department\r\n  employees.forEach((emp) => {\r\n    if (emp.departmentId) {\r\n      const dept = departments.find((d) => d.id === emp.departmentId);\r\n      if (dept) {\r\n        dept.employeeCount++;\r\n      }\r\n    }\r\n  });\r\n\r\n  // Save updated departments\r\n  localStorage.setItem(departmentsKey, JSON.stringify(departments));\r\n}\r\n\r\n// Perform initial count update\r\nupdateDepartmentCounts();\r\n\r\nlet workflows = JSON.parse(localStorage.getItem(workflowsKey)) || [\r\n  {\r\n    id: 1,\r\n    employeeId: 1,\r\n    type: \"Onboarding\",\r\n    details: { task: \"Setup workstation\" },\r\n    status: \"Pending\",\r\n  },\r\n];\r\n\r\nlet requests = JSON.parse(localStorage.getItem(requestsKey)) || [\r\n  {\r\n    id: 1,\r\n    employeeId: 2,\r\n    type: \"Equipment\",\r\n    requestItems: [{ name: \"Laptop\", quantity: 1 }],\r\n    status: \"Pending\",\r\n  },\r\n];\r\n\r\n@Injectable()\r\nexport class FakeBackendInterceptor implements HttpInterceptor {\r\n  constructor(private alertService: AlertService) {}\r\n\r\n  intercept(\r\n    request: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    const { url, method, headers, body } = request;\r\n    const alertService = this.alertService;\r\n\r\n    // Recalculate department employee counts based on employee data\r\n    recalculateDepartmentCounts();\r\n\r\n    return handleRoute();\r\n\r\n    // Helper function to recalculate and update department counts\r\n    function recalculateDepartmentCounts() {\r\n      // Reset all department counts to zero\r\n      departments.forEach((dept) => {\r\n        dept.employeeCount = 0;\r\n      });\r\n\r\n      // Count employees in each department\r\n      employees.forEach((emp) => {\r\n        if (emp.departmentId) {\r\n          const dept = departments.find((d) => d.id === emp.departmentId);\r\n          if (dept) {\r\n            dept.employeeCount++;\r\n          }\r\n        }\r\n      });\r\n\r\n      // Save updated departments to localStorage\r\n      localStorage.setItem(departmentsKey, JSON.stringify(departments));\r\n    }\r\n\r\n    function handleRoute() {\r\n      console.log(`Handling route: ${url} (${method})`);\r\n      switch (true) {\r\n        case url.endsWith(\"/accounts/authenticate\") && method === \"POST\":\r\n          return authenticate();\r\n        case url.endsWith(\"/accounts/refresh-token\") && method === \"POST\":\r\n          return refreshToken();\r\n        case url.endsWith(\"/accounts/revoke-token\") && method === \"POST\":\r\n          return revokeToken();\r\n        case url.endsWith(\"/accounts/register\") && method === \"POST\":\r\n          return register();\r\n        case url.endsWith(\"/accounts/verify-email\") && method === \"POST\":\r\n          return verifyEmail();\r\n        case url.endsWith(\"/accounts/forgot-password\") && method === \"POST\":\r\n          return forgotPassword();\r\n        case url.endsWith(\"/accounts/validate-reset-token\") &&\r\n          method === \"POST\":\r\n          return validateResetToken();\r\n        case url.endsWith(\"/accounts/reset-password\") && method === \"POST\":\r\n          return resetPassword();\r\n        case url.endsWith(\"/accounts\") && method === \"GET\":\r\n          return getAccounts();\r\n        case url.endsWith(\"/accounts/active\") && method === \"GET\":\r\n          return getActiveAccounts();\r\n        case url.match(/\\/accounts\\/\\d+$/) && method === \"GET\":\r\n          return getAccountById();\r\n        case url.endsWith(\"/accounts\") && method === \"POST\":\r\n          return createAccount();\r\n        case url.match(/\\/accounts\\/\\d+$/) && method === \"PUT\":\r\n          return updateAccount();\r\n        case url.match(/\\/accounts\\/\\d+$/) && method === \"DELETE\":\r\n          return deleteAccount();\r\n\r\n        // Employee routes\r\n        case url.endsWith(\"/employees\") && method === \"GET\":\r\n          return getEmployees();\r\n        case url.endsWith(\"/employees\") && method === \"POST\":\r\n          return createEmployee();\r\n        case url.match(/\\/employees\\/\\d+$/) && method === \"GET\":\r\n          return getEmployeeById();\r\n        case url.match(/\\/employees\\/\\d+$/) && method === \"PUT\":\r\n          return updateEmployee();\r\n        case url.match(/\\/employees\\/\\d+$/) && method === \"DELETE\":\r\n          return deleteEmployee();\r\n        case url.match(/\\/employees\\/\\d+\\/transfer$/) && method === \"POST\":\r\n          console.log(\"Matched specific employee transfer route!\");\r\n          return transferEmployee();\r\n        case url.includes(\"/transfer\") && method === \"POST\":\r\n          console.log(\"Matched generic transfer route!\");\r\n          console.log(\"URL:\", url);\r\n          console.log(\"Method:\", method);\r\n          console.log(\"Body:\", body);\r\n          return transferEmployee();\r\n\r\n        // Department routes\r\n        case url.endsWith(\"/departments\") && method === \"GET\":\r\n          return getDepartments();\r\n        case url.endsWith(\"/departments/names\") && method === \"GET\":\r\n          console.log(\"Getting department names for dropdown\");\r\n          return ok(departments.map((d) => ({ id: d.id, name: d.name })));\r\n        case url.match(/\\/departments\\/\\d+$/) && method === \"GET\":\r\n          return getDepartmentById();\r\n        case url.endsWith(\"/departments\") && method === \"POST\":\r\n          return createDepartment();\r\n        case url.match(/\\/departments\\/\\d+$/) && method === \"PUT\":\r\n          return updateDepartment();\r\n        case url.match(/\\/departments\\/\\d+$/) && method === \"DELETE\":\r\n          return deleteDepartment();\r\n\r\n        // Workflow routes\r\n        case url.match(/\\/workflows\\/employee\\/\\d+$/) && method === \"GET\":\r\n          return getEmployeeWorkflows();\r\n        case url.endsWith(\"/workflows\") && method === \"POST\":\r\n          return createWorkflow();\r\n        case url.match(/\\/workflows\\/\\d+$/) && method === \"PUT\":\r\n          return updateWorkflow();\r\n        case url.match(/\\/workflows\\/\\d+\\/status$/) && method === \"PUT\":\r\n          return updateWorkflowStatus();\r\n\r\n        // Request routes\r\n        case url.endsWith(\"/requests\") && method === \"GET\":\r\n          return getRequests();\r\n        case url.endsWith(\"/requests\") && method === \"POST\":\r\n          return createRequest();\r\n        case url.match(/\\/requests\\/\\d+$/) && method === \"PUT\":\r\n          return updateRequest();\r\n        case url.match(/\\/requests\\/\\d+$/) && method === \"DELETE\":\r\n          return deleteRequest();\r\n        case url.match(/\\/requests\\/\\d+$/) && method === \"GET\":\r\n          return getRequestById();\r\n\r\n        default:\r\n          // pass through any requests not handled above\r\n          return next.handle(request);\r\n      }\r\n    }\r\n\r\n    //route functions\r\n    function authenticate() {\r\n      const { email, password } = body;\r\n      console.log(\"Attempting to authenticate:\", email);\r\n\r\n      const account = accounts.find(\r\n        (x) => x.email === email && x.password === password && x.isVerified\r\n      );\r\n\r\n      console.log(\"Found account:\", account);\r\n\r\n      if (!account) return error(\"Email or password is incorrect\");\r\n\r\n      // Check if account is active\r\n      if (account.isActive === false) {\r\n        return error(\r\n          \"Your account is inactive. Please contact an administrator.\"\r\n        );\r\n      }\r\n\r\n      //add refresh token to account\r\n      account.refreshTokens.push(generateRefreshToken());\r\n      localStorage.setItem(accountsKey, JSON.stringify(accounts));\r\n\r\n      return ok({\r\n        ...basicDetails(account),\r\n        jwtToken: generateJwtToken(account),\r\n      });\r\n    }\r\n\r\n    function refreshToken() {\r\n      const refreshToken = getRefreshToken();\r\n\r\n      if (!refreshToken) return unauthorized();\r\n      const account = accounts.find((x) =>\r\n        x.refreshTokens.includes(refreshToken)\r\n      );\r\n\r\n      if (!account) return unauthorized();\r\n\r\n      //replace old refresh token with a new one and save\r\n      account.refreshTokens = account.refreshTokens.filter(\r\n        (x) => x !== refreshToken\r\n      );\r\n      account.refreshTokens.push(generateRefreshToken());\r\n      localStorage.setItem(accountsKey, JSON.stringify(accounts));\r\n\r\n      return ok({\r\n        ...basicDetails(account),\r\n        jwtToken: generateJwtToken(account),\r\n      });\r\n    }\r\n\r\n    function revokeToken() {\r\n      if (!isAuthenticated()) return unauthorized();\r\n\r\n      const refreshToken = getRefreshToken();\r\n      const account = accounts.find((x) =>\r\n        x.refreshTokens.includes(refreshToken)\r\n      );\r\n\r\n      //revoke token and save\r\n      account.refreshTokens = account.refreshTokens.filter(\r\n        (x) => x !== refreshToken\r\n      );\r\n      localStorage.setItem(accountsKey, JSON.stringify(accounts));\r\n\r\n      return ok();\r\n    }\r\n\r\n    function register() {\r\n      const account = body;\r\n\r\n      if (accounts.find((x) => x.email === account.email)) {\r\n        //display email already registered \"email\" in alert\r\n        setTimeout(() => {\r\n          alertService.info(\r\n            `\r\n              <h4>Email already registered</h4>\r\n              <p>Your email ${account.email} is already registered.</p>\r\n              <p>If you don't know your password please visit the <a href=\"${location.origin}/account/forgot-password\"> forgot password</a> page.</p>\r\n              <div><strong>Note:</strong> The fake backend displayed this \"email\" so you can test without an api. A real backend wound send a real email.</div>\r\n              `,\r\n            { autoClose: false }\r\n          );\r\n        }, 1000);\r\n\r\n        //always return ok() response to prevent email enumeration\r\n      }\r\n      //assign account id and a few other properties then save\r\n      account.id = newAccountId();\r\n      if (account.id === 1) {\r\n        //first registered account is admin\r\n        account.role = Role.Admin;\r\n      } else {\r\n        account.role = Role.User;\r\n      }\r\n      account.dateCreated = new Date().toISOString();\r\n      account.verificationToken = new Date().getTime().toString();\r\n      account.isVerified = false;\r\n      account.refreshTokens = [];\r\n      delete account.confirmPassword;\r\n      accounts.push(account);\r\n\r\n      localStorage.setItem(accountsKey, JSON.stringify(accounts));\r\n\r\n      //display verification email alert\r\n      setTimeout(() => {\r\n        const verifyUrl = `${location.origin}/account/verify-email?token=${account.verificationToken}`;\r\n        alertService.info(\r\n          `\r\n          <h4>Verification email </h4>\r\n          <p>Thank you for registering. A verification email has been sent to your email address.</p>\r\n          <p>Please click the below link to verify your email address:</p>\r\n          <p><a href=\"${verifyUrl}\">${verifyUrl}</a></p>\r\n          <div><strong>Note:</strong> The fake backend displayed this \"email\" so you can test without an api. A real backend wound send a real email.</div>\r\n          `,\r\n          { autoClose: false }\r\n        );\r\n      }, 1000);\r\n\r\n      return ok();\r\n    }\r\n\r\n    function verifyEmail() {\r\n      const { token } = body;\r\n      const account = accounts.find(\r\n        (x) => !!x.verificationToken && x.verificationToken === token\r\n      );\r\n\r\n      if (!account) return error(\"Invalid verification token\");\r\n\r\n      //set is verified flag to true if token is valid\r\n      account.isVerified = true;\r\n      localStorage.setItem(accountsKey, JSON.stringify(accounts));\r\n\r\n      return ok();\r\n    }\r\n\r\n    function forgotPassword() {\r\n      const { email } = body;\r\n      const account = accounts.find((x) => x.email === email);\r\n\r\n      //always return ok() response to prevent email enumeration\r\n      if (!account) return ok();\r\n\r\n      //create reset token that expires after 24 hours\r\n      account.resetToken = new Date().getTime().toString();\r\n      account.resetTokenExpires = new Date(\r\n        Date.now() + 24 * 60 * 60 * 1000\r\n      ).toISOString();\r\n      localStorage.setItem(accountsKey, JSON.stringify(accounts));\r\n\r\n      //display password reset email in alert\r\n      setTimeout(() => {\r\n        const resetUrl = `${location.origin}/account/reset-password?token=${account.resetToken}`;\r\n        alertService.info(\r\n          `\r\n          <h4>Password reset email</h4>\r\n          <p>Please click the below link to reset your password:</p>\r\n          <p><a href=\"${resetUrl}\">${resetUrl}</a></p>\r\n          <div><strong>Note:</strong> The fake backend displayed this \"email\" so you can test without an api. A real backend wound send a real email.</div>\r\n          `,\r\n          { autoClose: false }\r\n        );\r\n      }, 1000);\r\n\r\n      return ok();\r\n    }\r\n\r\n    function validateResetToken() {\r\n      const { token } = body;\r\n      const account = accounts.find(\r\n        (x) =>\r\n          !!x.resetToken &&\r\n          x.resetToken === token &&\r\n          new Date() < new Date(x.resetTokenExpires)\r\n      );\r\n\r\n      if (!account) return error(\"Invalid token\");\r\n\r\n      return ok();\r\n    }\r\n\r\n    function resetPassword() {\r\n      const { token, password } = body;\r\n      const account = accounts.find(\r\n        (x) =>\r\n          !!x.resetToken &&\r\n          x.resetToken === token &&\r\n          new Date() < new Date(x.resetTokenExpires)\r\n      );\r\n\r\n      if (!account) return error(\"Invalid token\");\r\n\r\n      //update passsword and remove reset token\r\n      account.password = password;\r\n      account.isVerified = true;\r\n      delete account.resetToken;\r\n      delete account.resetTokenExpires;\r\n      localStorage.setItem(accountsKey, JSON.stringify(accounts));\r\n\r\n      return ok();\r\n    }\r\n\r\n    function getAccounts() {\r\n      if (!isAuthenticated()) return unauthorized();\r\n\r\n      return ok(accounts.map((x) => basicDetails(x)));\r\n    }\r\n\r\n    function getActiveAccounts() {\r\n      if (!isAuthenticated()) return unauthorized();\r\n\r\n      // Return only active accounts for dropdowns in employee forms\r\n      const activeAccounts = accounts\r\n        .filter((acc) => acc.isActive !== false)\r\n        .map((x) => basicDetails(x));\r\n\r\n      return ok(activeAccounts);\r\n    }\r\n\r\n    function getAccountById() {\r\n      if (!isAuthenticated()) return unauthorized();\r\n\r\n      let account = accounts.find((x) => x.id === idFromUrl());\r\n\r\n      //user account can get own profile and admin account can get all profies\r\n      if (account.id !== currentAccount().id && !isAuthorized(Role.Admin)) {\r\n        return unauthorized();\r\n      }\r\n\r\n      return ok(basicDetails(account));\r\n    }\r\n\r\n    function createAccount() {\r\n      if (!isAuthorized(Role.Admin)) return unauthorized();\r\n\r\n      const account = body;\r\n      if (accounts.find((x) => x.email === account.email)) {\r\n        return error(`Email \"${account.email}\" is already registered`);\r\n      }\r\n\r\n      //assign account id and a few other properties then save\r\n      account.id = newAccountId();\r\n      account.dateCreated = new Date().toISOString();\r\n      account.isVerified = false;\r\n      account.refreshTokens = [];\r\n\r\n      // Set isActive to true by default if not specified\r\n      account.isActive =\r\n        account.isActive !== undefined ? account.isActive : true;\r\n\r\n      accounts.push(account);\r\n      localStorage.setItem(accountsKey, JSON.stringify(accounts));\r\n\r\n      return ok();\r\n    }\r\n\r\n    function updateAccount() {\r\n      if (!isAuthenticated()) return unauthorized();\r\n\r\n      let params = body;\r\n      let account = accounts.find((x) => x.id === idFromUrl());\r\n\r\n      //user accounts can update own profile and admin accounts can update all profiles\r\n      if (account.id !== currentAccount().id && !isAuthorized(Role.Admin)) {\r\n        return unauthorized();\r\n      }\r\n\r\n      //only update password if included\r\n      if (!params.password) {\r\n        delete params.password;\r\n      }\r\n      //don't save confirm password\r\n      delete params.confirmPassword;\r\n\r\n      //update and save account\r\n      Object.assign(account, params);\r\n      localStorage.setItem(accountsKey, JSON.stringify(accounts));\r\n\r\n      return ok(basicDetails(account));\r\n    }\r\n\r\n    function deleteAccount() {\r\n      if (!isAuthenticated()) return unauthorized();\r\n\r\n      let account = accounts.find((x) => x.id === idFromUrl());\r\n\r\n      //user accounts can delete own account and admin account can delete any account\r\n      if (account.id !== currentAccount().id && !isAuthorized(Role.Admin)) {\r\n        return unauthorized();\r\n      }\r\n\r\n      //delete account and save\r\n      accounts = accounts.filter((x) => x.id !== idFromUrl());\r\n      localStorage.setItem(accountsKey, JSON.stringify(accounts));\r\n      return ok();\r\n    }\r\n\r\n    // Employee functions\r\n    function getEmployees() {\r\n      if (!isAuthenticated()) return unauthorized();\r\n\r\n      // Return employees with department and account information for display\r\n      const enrichedEmployees = employees.map((employee) => {\r\n        const department = departments.find(\r\n          (d) => d.id === employee.departmentId\r\n        );\r\n        const account = accounts.find((a) => a.id === employee.userId);\r\n\r\n        return {\r\n          ...employee,\r\n          departmentName: department ? department.name : \"Unknown Department\",\r\n          accountName: account\r\n            ? `${account.firstName} ${account.lastName}`\r\n            : \"Unknown Account\",\r\n        };\r\n      });\r\n\r\n      return ok(enrichedEmployees);\r\n    }\r\n\r\n    function createEmployee() {\r\n      if (!isAuthorized(Role.Admin)) return unauthorized();\r\n\r\n      const employee = {\r\n        id: employees.length ? Math.max(...employees.map((x) => x.id)) + 1 : 1,\r\n        ...body,\r\n      };\r\n\r\n      employees.push(employee);\r\n      localStorage.setItem(employeesKey, JSON.stringify(employees));\r\n\r\n      // Recalculate department counts after adding an employee\r\n      recalculateDepartmentCounts();\r\n\r\n      return ok(employee);\r\n    }\r\n\r\n    function getEmployeeById() {\r\n      if (!isAuthenticated()) return unauthorized();\r\n\r\n      const id = idFromUrl();\r\n      const employee = employees.find((e) => e.id === id);\r\n\r\n      if (!employee) return error(\"Employee not found\");\r\n\r\n      // Add referenced entities for dropdown selection in forms\r\n      const department = departments.find(\r\n        (d) => d.id === employee.departmentId\r\n      );\r\n      const account = accounts.find((a) => a.id === employee.userId);\r\n\r\n      const enrichedEmployee = {\r\n        ...employee,\r\n        departmentName: department ? department.name : \"Unknown Department\",\r\n        accountName: account\r\n          ? `${account.firstName} ${account.lastName}`\r\n          : \"Unknown Account\",\r\n      };\r\n\r\n      return ok(enrichedEmployee);\r\n    }\r\n\r\n    function updateEmployee() {\r\n      if (!isAuthorized(Role.Admin)) return unauthorized();\r\n\r\n      const id = idFromUrl();\r\n      const employeeIndex = employees.findIndex((e) => e.id === id);\r\n\r\n      if (employeeIndex === -1) return error(\"Employee not found\");\r\n\r\n      // Store old department ID to check if it changed\r\n      const oldDepartmentId = employees[employeeIndex].departmentId;\r\n      const newDepartmentId = body.departmentId;\r\n\r\n      employees[employeeIndex] = {\r\n        ...employees[employeeIndex],\r\n        ...body,\r\n      };\r\n\r\n      localStorage.setItem(employeesKey, JSON.stringify(employees));\r\n\r\n      // Recalculate department counts if department changed\r\n      if (oldDepartmentId !== newDepartmentId) {\r\n        recalculateDepartmentCounts();\r\n      }\r\n\r\n      return ok(employees[employeeIndex]);\r\n    }\r\n\r\n    function deleteEmployee() {\r\n      if (!isAuthorized(Role.Admin)) return unauthorized();\r\n\r\n      const id = idFromUrl();\r\n\r\n      if (!employees.find((e) => e.id === id))\r\n        return error(\"Employee not found\");\r\n\r\n      employees = employees.filter((e) => e.id !== id);\r\n      localStorage.setItem(employeesKey, JSON.stringify(employees));\r\n\r\n      // Recalculate department counts after removing an employee\r\n      recalculateDepartmentCounts();\r\n\r\n      return ok({ message: \"Employee deleted\" });\r\n    }\r\n\r\n    function transferEmployee() {\r\n      if (!isAuthorized(Role.Admin)) return unauthorized();\r\n\r\n      // Get the employee ID from the URL correctly\r\n      // The URL format is like /employees/123/transfer, so we need to extract '123'\r\n      const urlParts = url.split(\"/\");\r\n      console.log(\"Transfer URL parts:\", urlParts);\r\n\r\n      // Find the 'employees' part and take the next segment as ID\r\n      let employeeIdIndex = -1;\r\n      for (let i = 0; i < urlParts.length; i++) {\r\n        if (urlParts[i] === \"employees\") {\r\n          employeeIdIndex = i + 1;\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (employeeIdIndex === -1 || employeeIdIndex >= urlParts.length) {\r\n        console.error(\"Invalid URL format for employee transfer\");\r\n        return error(\"Invalid URL format\");\r\n      }\r\n\r\n      const id = parseInt(urlParts[employeeIdIndex]);\r\n      console.log(\"Attempting to transfer employee with ID:\", id);\r\n\r\n      // Log all employees for debugging\r\n      console.log(\r\n        \"Available employees:\",\r\n        employees.map((e) => ({ id: e.id, employeeId: e.employeeId }))\r\n      );\r\n\r\n      const employee = employees.find((e) => e.id === id);\r\n      console.log(\"Found employee:\", employee);\r\n\r\n      if (!employee) return error(\"Employee not found\");\r\n\r\n      // Log the entire body to debug\r\n      console.log(\"Request body for transfer:\", body);\r\n\r\n      // Extract department ID directly from the request\r\n      let targetDepartmentId = null;\r\n\r\n      if (body.departmentId) {\r\n        targetDepartmentId = Number(body.departmentId);\r\n      } else if (body.department && body.department.id) {\r\n        targetDepartmentId = Number(body.department.id);\r\n      } else if (body.department) {\r\n        targetDepartmentId = Number(body.department);\r\n      } else if (body.targetDepartment) {\r\n        targetDepartmentId = Number(body.targetDepartment);\r\n      } else if (body.id) {\r\n        targetDepartmentId = Number(body.id);\r\n      }\r\n\r\n      console.log(\"Extracted target department ID:\", targetDepartmentId);\r\n\r\n      if (!targetDepartmentId) {\r\n        return error(\"Target department not specified\");\r\n      }\r\n\r\n      // Find the target department\r\n      const targetDepartment = departments.find(\r\n        (d) => d.id === targetDepartmentId\r\n      );\r\n\r\n      console.log(\"Target department:\", targetDepartment);\r\n      if (!targetDepartment) {\r\n        // Log all departments for debugging\r\n        console.log(\"Available departments:\", departments);\r\n        return error(\r\n          `Target department with ID ${targetDepartmentId} not found`\r\n        );\r\n      }\r\n\r\n      // Create a workflow for the transfer\r\n      const account = currentAccount();\r\n      const workflow = {\r\n        id: workflows.length ? Math.max(...workflows.map((w) => w.id)) + 1 : 1,\r\n        employeeId: employee.id,\r\n        type: \"Department Transfer\",\r\n        details: {\r\n          employeeId: employee.id,\r\n          employeeName: employee.employeeId, // Using employeeId as name for display\r\n          currentDepartment:\r\n            departments.find((d) => d.id === employee.departmentId)?.name ||\r\n            \"None\",\r\n          newDepartment: targetDepartment.name,\r\n          newDepartmentId: targetDepartmentId, // Add the department ID\r\n          requestedBy: `${account.firstName} ${account.lastName}`,\r\n          requestedAt: new Date().toISOString(),\r\n        },\r\n        status: \"Pending\",\r\n      };\r\n\r\n      workflows.push(workflow);\r\n      localStorage.setItem(workflowsKey, JSON.stringify(workflows));\r\n\r\n      console.log(\"Created department transfer workflow:\", workflow);\r\n\r\n      return ok({\r\n        employee,\r\n        workflow,\r\n        message: \"Transfer request has been created and is pending approval.\",\r\n      });\r\n    }\r\n\r\n    // Department functions\r\n    function getDepartments() {\r\n      if (!isAuthenticated()) return unauthorized();\r\n      return ok(departments);\r\n    }\r\n\r\n    function getDepartmentById() {\r\n      if (!isAuthenticated()) return unauthorized();\r\n\r\n      const id = idFromUrl();\r\n      const department = departments.find((d) => d.id === id);\r\n\r\n      if (!department) return error(\"Department not found\");\r\n\r\n      return ok(department);\r\n    }\r\n\r\n    function createDepartment() {\r\n      if (!isAuthorized(Role.Admin)) return unauthorized();\r\n\r\n      const department = {\r\n        id: departments.length\r\n          ? Math.max(...departments.map((d) => d.id)) + 1\r\n          : 1,\r\n        ...body,\r\n        employeeCount: 0,\r\n      };\r\n\r\n      departments.push(department);\r\n      localStorage.setItem(departmentsKey, JSON.stringify(departments));\r\n\r\n      return ok(department);\r\n    }\r\n\r\n    function updateDepartment() {\r\n      if (!isAuthorized(Role.Admin)) return unauthorized();\r\n\r\n      const id = idFromUrl();\r\n      const deptIndex = departments.findIndex((d) => d.id === id);\r\n\r\n      if (deptIndex === -1) return error(\"Department not found\");\r\n\r\n      departments[deptIndex] = {\r\n        ...departments[deptIndex],\r\n        ...body,\r\n        employeeCount: departments[deptIndex].employeeCount,\r\n      };\r\n\r\n      localStorage.setItem(departmentsKey, JSON.stringify(departments));\r\n\r\n      return ok(departments[deptIndex]);\r\n    }\r\n\r\n    function deleteDepartment() {\r\n      if (!isAuthorized(Role.Admin)) return unauthorized();\r\n\r\n      const id = idFromUrl();\r\n\r\n      if (!departments.find((d) => d.id === id))\r\n        return error(\"Department not found\");\r\n\r\n      departments = departments.filter((d) => d.id !== id);\r\n      localStorage.setItem(departmentsKey, JSON.stringify(departments));\r\n\r\n      return ok({ message: \"Department deleted\" });\r\n    }\r\n\r\n    // Workflow functions\r\n    function getEmployeeWorkflows() {\r\n      if (!isAuthenticated()) return unauthorized();\r\n\r\n      const employeeId = parseInt(url.split(\"/\").pop());\r\n      const employeeWorkflows = workflows.filter(\r\n        (w) => w.employeeId === employeeId\r\n      );\r\n\r\n      return ok(employeeWorkflows);\r\n    }\r\n\r\n    function createWorkflow() {\r\n      if (!isAuthorized(Role.Admin)) return unauthorized();\r\n\r\n      const workflow = {\r\n        id: workflows.length ? Math.max(...workflows.map((w) => w.id)) + 1 : 1,\r\n        ...body,\r\n      };\r\n\r\n      workflows.push(workflow);\r\n      localStorage.setItem(workflowsKey, JSON.stringify(workflows));\r\n\r\n      return ok(workflow);\r\n    }\r\n\r\n    function updateWorkflow() {\r\n      if (!isAuthorized(Role.Admin)) return unauthorized();\r\n\r\n      const id = idFromUrl();\r\n      const workflowIndex = workflows.findIndex((w) => w.id === id);\r\n\r\n      if (workflowIndex === -1) return error(\"Workflow not found\");\r\n\r\n      // Create the updated workflow object based on existing and new data\r\n      const updatedWorkflow = {\r\n        ...workflows[workflowIndex],\r\n        ...body, // body contains the new status and other workflow properties\r\n      };\r\n\r\n      // Check if the status is being updated to Approved or Rejected\r\n      if (\r\n        updatedWorkflow.status === \"Approved\" ||\r\n        updatedWorkflow.status === \"Rejected\"\r\n      ) {\r\n        // Update the corresponding request status if this is a request approval workflow\r\n        if (\r\n          updatedWorkflow.type === \"Request Approval\" &&\r\n          updatedWorkflow.details &&\r\n          updatedWorkflow.details.requestId\r\n        ) {\r\n          const requestId = updatedWorkflow.details.requestId;\r\n          const requestIndex = requests.findIndex((r) => r.id === requestId);\r\n\r\n          if (requestIndex !== -1) {\r\n            // Update the request status to match the workflow status\r\n            requests[requestIndex].status = updatedWorkflow.status;\r\n            localStorage.setItem(requestsKey, JSON.stringify(requests));\r\n            console.log(\r\n              `Updated request ${requestId} status to ${updatedWorkflow.status}`\r\n            );\r\n          }\r\n        }\r\n\r\n        // Handle department transfer logic if it's an approved department transfer\r\n        if (\r\n          updatedWorkflow.type === \"Department Transfer\" &&\r\n          updatedWorkflow.status === \"Approved\"\r\n        ) {\r\n          const employeeId = updatedWorkflow.employeeId;\r\n          const employee = employees.find((e) => e.id === employeeId);\r\n\r\n          if (employee && updatedWorkflow.details) {\r\n            // Get new department ID from workflow details\r\n            const newDepartmentId = updatedWorkflow.details.newDepartmentId;\r\n\r\n            if (newDepartmentId) {\r\n              // Use department ID directly if available\r\n              employee.departmentId = newDepartmentId;\r\n              localStorage.setItem(employeesKey, JSON.stringify(employees));\r\n\r\n              // Recalculate department counts after the transfer\r\n              recalculateDepartmentCounts();\r\n              console.log(\r\n                `Employee ${employeeId} transferred to department ID ${newDepartmentId} via workflow update`\r\n              );\r\n            } else if (updatedWorkflow.details.newDepartment) {\r\n              // Fallback to department name lookup\r\n              const newDepartmentName = updatedWorkflow.details.newDepartment;\r\n              const newDepartment = departments.find(\r\n                (d) => d.name === newDepartmentName\r\n              );\r\n\r\n              if (newDepartment) {\r\n                // Update employee's department\r\n                employee.departmentId = newDepartment.id;\r\n                localStorage.setItem(employeesKey, JSON.stringify(employees));\r\n\r\n                // Recalculate department counts after the transfer\r\n                recalculateDepartmentCounts();\r\n                console.log(\r\n                  `Employee ${employeeId} transferred to department ${newDepartmentName} via workflow update`\r\n                );\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      // Always update the workflow in place, regardless of status\r\n      workflows[workflowIndex] = updatedWorkflow;\r\n      localStorage.setItem(workflowsKey, JSON.stringify(workflows));\r\n\r\n      // Return the workflow object that was processed\r\n      return ok(updatedWorkflow);\r\n    }\r\n\r\n    function updateWorkflowStatus() {\r\n      if (!isAuthorized(Role.Admin)) return unauthorized();\r\n\r\n      const id = idFromUrl();\r\n      const workflowIndex = workflows.findIndex((w) => w.id === id);\r\n\r\n      if (workflowIndex === -1) return error(\"Workflow not found\");\r\n\r\n      const workflow = workflows[workflowIndex];\r\n      const newStatus = body.status;\r\n\r\n      // Update the corresponding request if this is a request approval workflow\r\n      if (\r\n        workflow.type === \"Request Approval\" &&\r\n        workflow.details &&\r\n        workflow.details.requestId\r\n      ) {\r\n        const requestId = workflow.details.requestId;\r\n        const requestIndex = requests.findIndex((r) => r.id === requestId);\r\n\r\n        if (requestIndex !== -1) {\r\n          // Update the request status to match the workflow status\r\n          requests[requestIndex].status = newStatus;\r\n          localStorage.setItem(requestsKey, JSON.stringify(requests));\r\n          console.log(`Updated request ${requestId} status to ${newStatus}`);\r\n        }\r\n      }\r\n\r\n      // Handle department transfer when approved\r\n      if (workflow.type === \"Department Transfer\" && newStatus === \"Approved\") {\r\n        const employeeId = workflow.employeeId;\r\n        const employee = employees.find((e) => e.id === employeeId);\r\n\r\n        if (employee && workflow.details) {\r\n          // Get new department ID from workflow details\r\n          const newDepartmentId = workflow.details.newDepartmentId;\r\n\r\n          if (newDepartmentId) {\r\n            // Use department ID directly if available\r\n            employee.departmentId = newDepartmentId;\r\n            localStorage.setItem(employeesKey, JSON.stringify(employees));\r\n\r\n            // Recalculate department counts after the transfer\r\n            recalculateDepartmentCounts();\r\n            console.log(\r\n              `Employee ${employeeId} transferred to department ID ${newDepartmentId}`\r\n            );\r\n          } else if (workflow.details.newDepartment) {\r\n            // Fallback to department name lookup\r\n            const newDepartmentName = workflow.details.newDepartment;\r\n            const newDepartment = departments.find(\r\n              (d) => d.name === newDepartmentName\r\n            );\r\n\r\n            if (newDepartment) {\r\n              employee.departmentId = newDepartment.id;\r\n              localStorage.setItem(employeesKey, JSON.stringify(employees));\r\n\r\n              // Recalculate department counts after the transfer\r\n              recalculateDepartmentCounts();\r\n              console.log(\r\n                `Employee ${employeeId} transferred to department ${newDepartmentName}`\r\n              );\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      // Update workflow status\r\n      workflow.status = newStatus;\r\n\r\n      // Always keep the workflow in the list and update it\r\n      workflows[workflowIndex] = workflow;\r\n      localStorage.setItem(workflowsKey, JSON.stringify(workflows));\r\n\r\n      return ok(workflow);\r\n    }\r\n\r\n    // Request functions\r\n    function getRequests() {\r\n      if (!isAuthenticated()) return unauthorized(); // All authenticated users can attempt to get requests\r\n\r\n      const acc = currentAccount();\r\n      if (!acc) return unauthorized(); // Should be caught by isAuthenticated, but good practice\r\n\r\n      if (acc.role === Role.Admin) {\r\n        // Admin sees all requests\r\n        return ok(requests);\r\n      } else {\r\n        // Regular user sees only their own requests\r\n        const currentUserEmployee = employees.find((e) => e.userId === acc.id);\r\n        if (!currentUserEmployee) {\r\n          // If the user is not linked to an employee record, they have no requests\r\n          return ok([]);\r\n        }\r\n        const userRequests = requests.filter(\r\n          (r) => r.employeeId === currentUserEmployee.id\r\n        );\r\n        return ok(userRequests);\r\n      }\r\n    }\r\n\r\n    function createRequest() {\r\n      if (!isAuthenticated()) return unauthorized();\r\n\r\n      const account = currentAccount();\r\n\r\n      // Convert employeeId to number if it exists (fix for type mismatch)\r\n      if (body.employeeId) {\r\n        body.employeeId = Number(body.employeeId);\r\n      }\r\n\r\n      // Only set default employeeId if not provided in request and user is not admin\r\n      if (!body.employeeId) {\r\n        // For both admin and non-admin, if employeeId is not set, use the current user's employee record\r\n        const employee = employees.find((e) => e.userId === account.id);\r\n        if (employee) {\r\n          body.employeeId = employee.id;\r\n        } else if (account.role !== Role.Admin) {\r\n          // Only error for non-admin users - admins can create requests without employee association\r\n          return error(\"Employee not found for current user\");\r\n        }\r\n      }\r\n\r\n      // Create a deep copy of the request body to avoid reference issues\r\n      const requestData = JSON.parse(JSON.stringify(body));\r\n\r\n      const request = {\r\n        id: requests.length ? Math.max(...requests.map((r) => r.id)) + 1 : 1,\r\n        ...requestData,\r\n      };\r\n\r\n      console.log(\"Creating new request:\", request);\r\n\r\n      requests.push(request);\r\n      localStorage.setItem(requestsKey, JSON.stringify(requests));\r\n\r\n      // Create a corresponding workflow for this request\r\n      if (request.employeeId) {\r\n        const employee = employees.find((e) => e.id === request.employeeId);\r\n\r\n        if (employee) {\r\n          const workflow = {\r\n            id: workflows.length\r\n              ? Math.max(...workflows.map((w) => w.id)) + 1\r\n              : 1,\r\n            employeeId: request.employeeId,\r\n            type: \"Request Approval\",\r\n            details: {\r\n              requestId: request.id,\r\n              requestType: request.type,\r\n              requestItems: JSON.parse(JSON.stringify(request.requestItems)),\r\n              createdBy: `${account.firstName} ${account.lastName}`,\r\n              createdAt: new Date().toISOString(),\r\n            },\r\n            status: \"Pending\",\r\n          };\r\n\r\n          workflows.push(workflow);\r\n          localStorage.setItem(workflowsKey, JSON.stringify(workflows));\r\n          console.log(\"Created workflow for request:\", workflow);\r\n        }\r\n      }\r\n\r\n      return ok(request);\r\n    }\r\n\r\n    function updateRequest() {\r\n      if (!isAuthorized(Role.Admin)) return unauthorized();\r\n\r\n      const id = idFromUrl();\r\n      const reqIndex = requests.findIndex((r) => r.id === id);\r\n\r\n      if (reqIndex === -1) return error(\"Request not found\");\r\n\r\n      // Convert employeeId to number if it exists (fix for type mismatch)\r\n      if (body.employeeId) {\r\n        body.employeeId = Number(body.employeeId);\r\n      }\r\n\r\n      // Create a deep copy of the request body to avoid reference issues\r\n      const requestData = JSON.parse(JSON.stringify(body));\r\n\r\n      const oldRequest = requests[reqIndex];\r\n      const updatedRequest = {\r\n        ...oldRequest,\r\n        ...requestData,\r\n      };\r\n\r\n      requests[reqIndex] = updatedRequest;\r\n      console.log(\"Updated request:\", updatedRequest);\r\n\r\n      localStorage.setItem(requestsKey, JSON.stringify(requests));\r\n\r\n      // Update the corresponding workflow if it exists\r\n      // If status has changed, update workflow status accordingly\r\n      const account = currentAccount();\r\n      const relatedWorkflows = workflows.filter(\r\n        (w) =>\r\n          w.type === \"Request Approval\" &&\r\n          w.details &&\r\n          w.details.requestId === id\r\n      );\r\n\r\n      if (relatedWorkflows.length > 0) {\r\n        // Update existing workflow\r\n        relatedWorkflows.forEach((workflow) => {\r\n          workflow.details.requestType = updatedRequest.type;\r\n          workflow.details.requestItems = JSON.parse(\r\n            JSON.stringify(updatedRequest.requestItems)\r\n          );\r\n          workflow.details.updatedBy = `${account.firstName} ${account.lastName}`;\r\n          workflow.details.updatedAt = new Date().toISOString();\r\n\r\n          // If request status was updated, reflect in workflow\r\n          if (oldRequest.status !== updatedRequest.status) {\r\n            if (updatedRequest.status === \"Approved\") {\r\n              workflow.status = \"Approved\";\r\n            } else if (updatedRequest.status === \"Rejected\") {\r\n              workflow.status = \"Rejected\";\r\n            }\r\n          }\r\n        });\r\n      } else if (updatedRequest.employeeId) {\r\n        // No existing workflow found, create a new one\r\n        const employee = employees.find(\r\n          (e) => e.id === updatedRequest.employeeId\r\n        );\r\n\r\n        if (employee) {\r\n          const workflow = {\r\n            id: workflows.length\r\n              ? Math.max(...workflows.map((w) => w.id)) + 1\r\n              : 1,\r\n            employeeId: updatedRequest.employeeId,\r\n            type: \"Request Approval\",\r\n            details: {\r\n              requestId: updatedRequest.id,\r\n              requestType: updatedRequest.type,\r\n              requestItems: JSON.parse(\r\n                JSON.stringify(updatedRequest.requestItems)\r\n              ),\r\n              createdBy: `${account.firstName} ${account.lastName}`,\r\n              createdAt: new Date().toISOString(),\r\n            },\r\n            status: \"Pending\",\r\n          };\r\n\r\n          workflows.push(workflow);\r\n          console.log(\"Created workflow for updated request:\", workflow);\r\n        }\r\n      }\r\n\r\n      localStorage.setItem(workflowsKey, JSON.stringify(workflows));\r\n\r\n      return ok(updatedRequest);\r\n    }\r\n\r\n    function deleteRequest() {\r\n      if (!isAuthorized(Role.Admin)) return unauthorized();\r\n\r\n      const id = idFromUrl();\r\n\r\n      if (!requests.find((r) => r.id === id)) return error(\"Request not found\");\r\n\r\n      requests = requests.filter((r) => r.id !== id);\r\n      localStorage.setItem(requestsKey, JSON.stringify(requests));\r\n\r\n      return ok({ message: \"Request deleted\" });\r\n    }\r\n\r\n    function getRequestById() {\r\n      if (!isAuthenticated()) return unauthorized();\r\n\r\n      console.log(\"Getting request by ID\");\r\n      const id = idFromUrl();\r\n      console.log(\"Request ID from URL:\", id);\r\n\r\n      const request = requests.find((r) => r.id === id);\r\n      console.log(\"Found request:\", request);\r\n\r\n      if (!request) return error(\"Request not found\");\r\n\r\n      // Important: Create a deep copy of the request to avoid reference issues\r\n      const requestCopy = JSON.parse(JSON.stringify(request));\r\n      console.log(\"Returning request copy:\", requestCopy);\r\n\r\n      return ok(requestCopy);\r\n    }\r\n\r\n    //helper functions\r\n\r\n    function ok(body?) {\r\n      return of(new HttpResponse({ status: 200, body })).pipe(delay(500)); //delay observalbe to simulate server api call\r\n    }\r\n\r\n    function error(message) {\r\n      return throwError({ error: { message } }).pipe(\r\n        materialize(),\r\n        delay(500),\r\n        dematerialize()\r\n      );\r\n      // call materialize and dematerialize to ensure delay even if an error is thrown\r\n    }\r\n\r\n    function unauthorized() {\r\n      return throwError({\r\n        status: 401,\r\n        error: { message: \"Unauthorized\" },\r\n      }).pipe(materialize(), delay(500), dematerialize());\r\n    }\r\n\r\n    function basicDetails(account) {\r\n      const {\r\n        id,\r\n        title,\r\n        firstName,\r\n        lastName,\r\n        email,\r\n        role,\r\n        dateCreated,\r\n        isVerified,\r\n        isActive,\r\n      } = account;\r\n      return {\r\n        id,\r\n        title,\r\n        firstName,\r\n        lastName,\r\n        email,\r\n        role,\r\n        dateCreated,\r\n        isVerified,\r\n        isActive: isActive !== undefined ? isActive : true, // Ensure isActive has a default value\r\n      };\r\n    }\r\n\r\n    function isAuthenticated() {\r\n      return !!currentAccount();\r\n    }\r\n\r\n    function isAuthorized(role) {\r\n      const account = currentAccount();\r\n      if (!account) return false;\r\n      return account.role === role;\r\n    }\r\n\r\n    function idFromUrl() {\r\n      const urlParts = url.split(\"/\");\r\n      const id = parseInt(urlParts[urlParts.length - 1]);\r\n      console.log(\"URL parts:\", urlParts, \"Extracted ID:\", id);\r\n      return id;\r\n    }\r\n\r\n    function newAccountId() {\r\n      //create random id for new account\r\n      return accounts.length ? Math.max(...accounts.map((x) => x.id)) + 1 : 1;\r\n    }\r\n\r\n    function currentAccount() {\r\n      //check if jwt token is in auth header\r\n      const authHeader = headers.get(\"Authorization\");\r\n      if (!authHeader.startsWith(\"Bearer fake-jwt-token\")) return;\r\n\r\n      //check if token is expired\r\n      const jwtToken = JSON.parse(atob(authHeader.split(\".\")[1]));\r\n      const tokenExpired = Date.now() > jwtToken.exp * 1000;\r\n      if (tokenExpired) return;\r\n\r\n      const account = accounts.find((x) => x.id === jwtToken.id);\r\n      return account;\r\n    }\r\n\r\n    function generateJwtToken(account) {\r\n      //create token that expires in 15 minutes\r\n      const tokenPayLoad = {\r\n        exp: Math.round(new Date(Date.now() + 15 * 60 * 1000).getTime() / 1000),\r\n        id: account.id,\r\n      };\r\n\r\n      return `fake-jwt-token.${btoa(JSON.stringify(tokenPayLoad))}`;\r\n    }\r\n\r\n    function generateRefreshToken() {\r\n      const token = new Date().getTime().toString();\r\n\r\n      //add token cookie that expires in 7days\r\n      const expires = new Date(\r\n        Date.now() + 7 * 24 * 60 * 60 * 1000\r\n      ).toUTCString();\r\n      document.cookie = `fakeRefreshToken=${token}; expires=${expires}; path=/`;\r\n      return token;\r\n    }\r\n\r\n    function getRefreshToken() {\r\n      //get refresh token from cookei\r\n      return (\r\n        document.cookie\r\n          .split(\";\")\r\n          .find((x) => x.includes(`fakeRefreshToken`)) || \"=\"\r\n      ).split(\"=\")[1];\r\n    }\r\n  }\r\n}\r\n\r\nexport let fakeBackendProvider = {\r\n  //use fake backend in place of Http service for backend-less development\r\n  provide: HTTP_INTERCEPTORS,\r\n  useClass: FakeBackendInterceptor,\r\n  multi: true,\r\n};"]},"metadata":{},"sourceType":"module","externalDependencies":[]}