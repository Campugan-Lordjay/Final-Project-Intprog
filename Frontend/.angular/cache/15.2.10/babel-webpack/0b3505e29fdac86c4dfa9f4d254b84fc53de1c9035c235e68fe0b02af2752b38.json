{"ast":null,"code":"import { environment } from \"@environments/environment\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@app/_services\";\nexport let JwtInterceptor = /*#__PURE__*/(() => {\n  class JwtInterceptor {\n    accountService;\n    constructor(accountService) {\n      this.accountService = accountService;\n    }\n    intercept(req, next) {\n      // add auth header with jwt if account is logged in and request is to the api url\n      const account = this.accountService.accountValue;\n      const isLoggedIn = account && account.jwtToken;\n      const isApiUrl = req.url.startsWith(environment.apiUrl);\n      if (isLoggedIn && isApiUrl) {\n        req = req.clone({\n          setHeaders: {\n            Authorization: `Bearer ${account.jwtToken}`\n          }\n        });\n      }\n      return next.handle(req);\n    }\n    static ɵfac = function JwtInterceptor_Factory(t) {\n      return new (t || JwtInterceptor)(i0.ɵɵinject(i1.AccountService));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: JwtInterceptor,\n      factory: JwtInterceptor.ɵfac\n    });\n  }\n  return JwtInterceptor;\n})();","map":{"version":3,"mappings":"AASA,SAASA,WAAW,QAAQ,2BAA2B;;;AAIvD,WAAaC,cAAc;EAArB,MAAOA,cAAc;IACHC;IAApBC,YAAoBD,cAA8B;MAA9B,mBAAc,GAAdA,cAAc;IAAmB;IAErDE,SAAS,CACLC,GAAqB,EACrBC,IAAiB;MAEjB;MACA,MAAMC,OAAO,GAAG,IAAI,CAACL,cAAc,CAACM,YAAY;MAChD,MAAMC,UAAU,GAAGF,OAAO,IAAIA,OAAO,CAACG,QAAQ;MAC9C,MAAMC,QAAQ,GAAGN,GAAG,CAACO,GAAG,CAACC,UAAU,CAACb,WAAW,CAACc,MAAM,CAAC;MACvD,IAAIL,UAAU,IAAIE,QAAQ,EAAE;QACxBN,GAAG,GAAGA,GAAG,CAACU,KAAK,CAAC;UACZC,UAAU,EAAE;YACRC,aAAa,EAAE,UAAUV,OAAO,CAACG,QAAQ;;SAEhD,CAAC;;MAGN,OAAOJ,IAAI,CAACY,MAAM,CAACb,GAAG,CAAC;IAC3B;;uBApBSJ,cAAc;IAAA;;aAAdA,cAAc;MAAAkB,SAAdlB,cAAc;IAAA;;SAAdA,cAAc;AAAA","names":["environment","JwtInterceptor","accountService","constructor","intercept","req","next","account","accountValue","isLoggedIn","jwtToken","isApiUrl","url","startsWith","apiUrl","clone","setHeaders","Authorization","handle","factory"],"sourceRoot":"","sources":["C:\\Users\\watss\\Documents\\School\\magsayo\\Final-Project-Intprog\\Frontend\\src\\app\\_helpers\\jwt.interceptor.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\"\r\nimport {\r\n    HttpRequest,\r\n    HttpHandler,\r\n    HttpEvent,\r\n    HttpInterceptor,\r\n} from \"@angular/common/http\"\r\nimport { Observable } from \"rxjs\"\r\n\r\nimport { environment } from \"@environments/environment\"\r\nimport { AccountService } from \"@app/_services\"\r\n\r\n@Injectable()\r\nexport class JwtInterceptor implements HttpInterceptor {\r\n    constructor(private accountService: AccountService) {}\r\n\r\n    intercept(\r\n        req: HttpRequest<any>,\r\n        next: HttpHandler\r\n    ): Observable<HttpEvent<any>> {\r\n        // add auth header with jwt if account is logged in and request is to the api url\r\n        const account = this.accountService.accountValue\r\n        const isLoggedIn = account && account.jwtToken\r\n        const isApiUrl = req.url.startsWith(environment.apiUrl)\r\n        if (isLoggedIn && isApiUrl) {\r\n            req = req.clone({\r\n                setHeaders: {\r\n                    Authorization: `Bearer ${account.jwtToken}`,\r\n                },\r\n            })\r\n        }\r\n\r\n        return next.handle(req)\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}