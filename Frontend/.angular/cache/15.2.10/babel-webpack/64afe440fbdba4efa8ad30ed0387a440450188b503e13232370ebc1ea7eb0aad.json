{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { first } from 'rxjs/operators';\nimport { MustMatch } from '@app/_helpers';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@app/_services\";\nimport * as i4 from \"@angular/common\";\nfunction ResetPasswordComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \" Validating token... \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ResetPasswordComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \" Token validation failed, if the token has expired you can get a new one at the \");\n    i0.ɵɵelementStart(2, \"a\", 4);\n    i0.ɵɵtext(3, \"forgot password\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(4, \" page. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ResetPasswordComponent_form_5_div_5_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Password is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ResetPasswordComponent_form_5_div_5_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Password must be at least 6 characters\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ResetPasswordComponent_form_5_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 13);\n    i0.ɵɵtemplate(1, ResetPasswordComponent_form_5_div_5_div_1_Template, 2, 0, \"div\", 2);\n    i0.ɵɵtemplate(2, ResetPasswordComponent_form_5_div_5_div_2_Template, 2, 0, \"div\", 2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.f.password.errors.required);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.f.password.errors.minLength);\n  }\n}\nfunction ResetPasswordComponent_form_5_div_10_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Confirm Password is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ResetPasswordComponent_form_5_div_10_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Passwords must match\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ResetPasswordComponent_form_5_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 13);\n    i0.ɵɵtemplate(1, ResetPasswordComponent_form_5_div_10_div_1_Template, 2, 0, \"div\", 2);\n    i0.ɵɵtemplate(2, ResetPasswordComponent_form_5_div_10_div_2_Template, 2, 0, \"div\", 2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.f.confirmPassword.errors.required);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.f.confirmPassword.errors.mustMatch);\n  }\n}\nfunction ResetPasswordComponent_form_5_span_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 14);\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    \"is-invalid\": a0\n  };\n};\nfunction ResetPasswordComponent_form_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"form\", 5);\n    i0.ɵɵlistener(\"ngSubmit\", function ResetPasswordComponent_form_5_Template_form_ngSubmit_0_listener() {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.onSubmit());\n    });\n    i0.ɵɵelementStart(1, \"div\", 6)(2, \"label\");\n    i0.ɵɵtext(3, \"Password\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(4, \"input\", 7);\n    i0.ɵɵtemplate(5, ResetPasswordComponent_form_5_div_5_Template, 3, 2, \"div\", 8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"div\", 6)(7, \"label\");\n    i0.ɵɵtext(8, \"Confirm Password\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(9, \"input\", 9);\n    i0.ɵɵtemplate(10, ResetPasswordComponent_form_5_div_10_Template, 3, 2, \"div\", 8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"div\", 6)(12, \"button\", 10);\n    i0.ɵɵtemplate(13, ResetPasswordComponent_form_5_span_13_Template, 1, 0, \"span\", 11);\n    i0.ɵɵtext(14, \" Reset Password \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"a\", 12);\n    i0.ɵɵtext(16, \"Cancel\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"formGroup\", ctx_r2.form);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(7, _c0, ctx_r2.submitted && ctx_r2.f.password.errors));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.submitted && ctx_r2.f.password.errors);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(9, _c0, ctx_r2.submitted && ctx_r2.f.confirmPassword.errors));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.submitted && ctx_r2.f.confirmPassword.errors);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"disabled\", ctx_r2.loading);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.loading);\n  }\n}\nvar TokenStatus = /*#__PURE__*/(() => {\n  (function (TokenStatus) {\n    TokenStatus[TokenStatus[\"Validating\"] = 0] = \"Validating\";\n    TokenStatus[TokenStatus[\"Valid\"] = 1] = \"Valid\";\n    TokenStatus[TokenStatus[\"Invalid\"] = 2] = \"Invalid\";\n  })(TokenStatus || (TokenStatus = {}));\n  return TokenStatus;\n})();\nexport let ResetPasswordComponent = /*#__PURE__*/(() => {\n  class ResetPasswordComponent {\n    formBuilder;\n    route;\n    router;\n    accountService;\n    alertService;\n    TokenStatus = TokenStatus;\n    tokenStatus = TokenStatus.Validating;\n    token = null;\n    form;\n    loading = false;\n    submitted = false;\n    constructor(formBuilder, route, router, accountService, alertService) {\n      this.formBuilder = formBuilder;\n      this.route = route;\n      this.router = router;\n      this.accountService = accountService;\n      this.alertService = alertService;\n    }\n    ngOnInit() {\n      this.form = this.formBuilder.group({\n        password: ['', [Validators.required, Validators.minLength(6)]],\n        confirmPassword: ['', Validators.required]\n      }, {\n        validator: MustMatch('password', 'confirmPassword')\n      });\n      const token = this.route.snapshot.queryParams['token'];\n      // remove token from url to prevent http referer leakage\n      this.router.navigate([], {\n        relativeTo: this.route,\n        replaceUrl: true\n      });\n      this.accountService.validateResetToken(token).pipe(first()).subscribe({\n        next: () => {\n          this.token = token;\n          this.tokenStatus = TokenStatus.Valid;\n        },\n        error: () => {\n          this.tokenStatus = TokenStatus.Invalid;\n        }\n      });\n    }\n    // convenience getter for easy access to form fields\n    get f() {\n      return this.form.controls;\n    }\n    onSubmit() {\n      this.submitted = true;\n      // reset alerts on submit\n      this.alertService.clear();\n      // stop here if form is invalid\n      if (this.form.invalid) {\n        return;\n      }\n      this.loading = true;\n      this.accountService.resetPassword(this.token, this.f.password.value, this.f.confirmPassword.value).pipe(first()).subscribe({\n        next: () => {\n          this.alertService.success('Password reset successful, you can now login', {\n            keepAfterRouteChange: true\n          });\n          this.router.navigate(['../login'], {\n            relativeTo: this.route\n          });\n        },\n        error: error => {\n          this.alertService.error(error);\n          this.loading = false;\n        }\n      });\n    }\n    static ɵfac = function ResetPasswordComponent_Factory(t) {\n      return new (t || ResetPasswordComponent)(i0.ɵɵdirectiveInject(i1.UntypedFormBuilder), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.AccountService), i0.ɵɵdirectiveInject(i3.AlertService));\n    };\n    static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ResetPasswordComponent,\n      selectors: [[\"ng-component\"]],\n      decls: 6,\n      vars: 3,\n      consts: [[1, \"card-header\"], [1, \"card-body\"], [4, \"ngIf\"], [3, \"formGroup\", \"ngSubmit\", 4, \"ngIf\"], [\"routerLink\", \"../forgot-password\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"type\", \"password\", \"formControlName\", \"password\", 1, \"form-control\", 3, \"ngClass\"], [\"class\", \"invalid-feedback\", 4, \"ngIf\"], [\"type\", \"password\", \"formControlName\", \"confirmPassword\", 1, \"form-control\", 3, \"ngClass\"], [1, \"btn\", \"btn-primary\", 3, \"disabled\"], [\"class\", \"spinner-border spinner-border-sm mr-1\", 4, \"ngIf\"], [\"routerLink\", \"../login\", 1, \"btn\", \"btn-link\"], [1, \"invalid-feedback\"], [1, \"spinner-border\", \"spinner-border-sm\", \"mr-1\"]],\n      template: function ResetPasswordComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"h3\", 0);\n          i0.ɵɵtext(1, \"Reset Password\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(2, \"div\", 1);\n          i0.ɵɵtemplate(3, ResetPasswordComponent_div_3_Template, 2, 0, \"div\", 2);\n          i0.ɵɵtemplate(4, ResetPasswordComponent_div_4_Template, 5, 0, \"div\", 2);\n          i0.ɵɵtemplate(5, ResetPasswordComponent_form_5_Template, 17, 11, \"form\", 3);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngIf\", ctx.tokenStatus == ctx.TokenStatus.Validating);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.tokenStatus == ctx.TokenStatus.Invalid);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.tokenStatus == ctx.TokenStatus.Valid);\n        }\n      },\n      dependencies: [i4.NgClass, i4.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i2.RouterLink],\n      encapsulation: 2\n    });\n  }\n  return ResetPasswordComponent;\n})();","map":{"version":3,"mappings":"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","names":["Validators","first","MustMatch","i0","TokenStatus","ResetPasswordComponent","formBuilder","route","router","accountService","alertService","tokenStatus","Validating","token","form","loading","submitted","constructor","ngOnInit","group","password","required","minLength","confirmPassword","validator","snapshot","queryParams","navigate","relativeTo","replaceUrl","validateResetToken","pipe","subscribe","next","Valid","error","Invalid","f","controls","onSubmit","clear","invalid","resetPassword","value","success","keepAfterRouteChange","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\watss\\Documents\\School\\magsayo\\Final-Project-Intprog\\Frontend\\src\\app\\account\\reset-password.component.ts","C:\\Users\\watss\\Documents\\School\\magsayo\\Final-Project-Intprog\\Frontend\\src\\app\\account\\reset-password.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { UntypedFormBuilder, UntypedFormGroup, Validators } from '@angular/forms';\r\nimport { first } from 'rxjs/operators';\r\n\r\nimport { AccountService, AlertService } from '@app/_services';\r\nimport { MustMatch } from '@app/_helpers';\r\n\r\nenum TokenStatus {\r\n    Validating,\r\n    Valid,\r\n    Invalid\r\n}\r\n\r\n@Component({ templateUrl: 'reset-password.component.html' })\r\nexport class ResetPasswordComponent implements OnInit {\r\n    TokenStatus = TokenStatus;\r\n    tokenStatus = TokenStatus.Validating;\r\n    token = null;\r\n    form: UntypedFormGroup;\r\n    loading = false;\r\n    submitted = false;\r\n\r\n    constructor(\r\n        private formBuilder: UntypedFormBuilder,\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        private accountService: AccountService,\r\n        private alertService: AlertService\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.form = this.formBuilder.group({\r\n            password: ['', [Validators.required, Validators.minLength(6)]],\r\n            confirmPassword: ['', Validators.required]\r\n        }, {\r\n            validator: MustMatch('password', 'confirmPassword')\r\n        });\r\n    \r\n        const token = this.route.snapshot.queryParams['token'];\r\n    \r\n        // remove token from url to prevent http referer leakage\r\n        this.router.navigate([], { relativeTo: this.route, replaceUrl: true });\r\n    \r\n        this.accountService.validateResetToken(token)\r\n            .pipe(first())\r\n            .subscribe({\r\n                next: () => {\r\n                    this.token = token;\r\n                    this.tokenStatus = TokenStatus.Valid;\r\n                },\r\n                error: () => {\r\n                    this.tokenStatus = TokenStatus.Invalid;\r\n                }\r\n            });\r\n    }\r\n    \r\n    // convenience getter for easy access to form fields\r\n    get f() { return this.form.controls; }\r\n    \r\n    onSubmit() {\r\n        this.submitted = true;\r\n    \r\n        // reset alerts on submit\r\n        this.alertService.clear();\r\n    \r\n        // stop here if form is invalid\r\n        if (this.form.invalid) {\r\n            return;\r\n        }\r\n    \r\n        this.loading = true;\r\n        this.accountService.resetPassword(this.token, this.f.password.value, this.f.confirmPassword.value)\r\n            .pipe(first())\r\n            .subscribe({\r\n                next: () => {\r\n                    this.alertService.success('Password reset successful, you can now login', { keepAfterRouteChange: true });\r\n                    this.router.navigate(['../login'], { relativeTo: this.route });\r\n                },\r\n                error: error => {\r\n                    this.alertService.error(error);\r\n                    this.loading = false;\r\n                }\r\n            });\r\n    }\r\n}    ","<h3 class=\"card-header\">Reset Password</h3>\r\n<div class=\"card-body\">\r\n  <div *ngIf=\"tokenStatus == TokenStatus.Validating\">\r\n    Validating token...\r\n  </div>\r\n  <div *ngIf=\"tokenStatus == TokenStatus.Invalid\">\r\n    Token validation failed, if the token has expired you can get a new one at the <a routerLink=\"../forgot-password\">forgot password</a> page.\r\n  </div>\r\n  <form *ngIf=\"tokenStatus == TokenStatus.Valid\" [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n    <div class=\"form-group\">\r\n      <label>Password</label>\r\n      <input type=\"password\" formControlName=\"password\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.password.errors }\" />\r\n      <div *ngIf=\"submitted && f.password.errors\" class=\"invalid-feedback\">\r\n        <div *ngIf=\"f.password.errors.required\">Password is required</div>\r\n        <div *ngIf=\"f.password.errors.minLength\">Password must be at least 6 characters</div>\r\n      </div>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Confirm Password</label>\r\n      <input type=\"password\" formControlName=\"confirmPassword\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.confirmPassword.errors }\" />\r\n      <div *ngIf=\"submitted && f.confirmPassword.errors\" class=\"invalid-feedback\">\r\n        <div *ngIf=\"f.confirmPassword.errors.required\">Confirm Password is required</div>\r\n        <div *ngIf=\"f.confirmPassword.errors.mustMatch\">Passwords must match</div>\r\n      </div>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <button [disabled]=\"loading\" class=\"btn btn-primary\">\r\n        <span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"></span>\r\n        Reset Password\r\n      </button>\r\n      <a routerLink=\"../login\" class=\"btn btn-link\">Cancel</a>\r\n    </div>\r\n  </form>\r\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}