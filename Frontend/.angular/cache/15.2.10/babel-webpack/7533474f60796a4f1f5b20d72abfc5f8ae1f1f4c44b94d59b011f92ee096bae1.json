{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { map, finalize } from 'rxjs/operators';\nimport { environment } from '@environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nconst baseUrl = `${environment.apiUrl}/accounts`;\nexport let AccountService = /*#__PURE__*/(() => {\n  class AccountService {\n    router;\n    http;\n    accountSubject;\n    account;\n    constructor(router, http) {\n      this.router = router;\n      this.http = http;\n      // Load account from local storage if available\n      this.accountSubject = new BehaviorSubject(JSON.parse(localStorage.getItem('account')));\n      this.account = this.accountSubject.asObservable();\n    }\n    get accountValue() {\n      return this.accountSubject.value;\n    }\n    login(email, password) {\n      return this.http.post(`${baseUrl}/authenticate`, {\n        email,\n        password\n      }, {\n        withCredentials: true\n      }).pipe(map(account => {\n        // Store the account (with jwtToken) in local storage\n        localStorage.setItem('account', JSON.stringify(account));\n        this.accountSubject.next(account);\n        this.startRefreshTokenTimer();\n        return account;\n      }));\n    }\n    logout() {\n      // Clean up local state first\n      this.stopRefreshTokenTimer();\n      this.accountSubject.next(null);\n      localStorage.removeItem('account');\n      // Attempt to revoke the token, but don't wait for it\n      const refreshToken = this.getRefreshTokenFromCookie();\n      if (refreshToken) {\n        this.http.post(`${baseUrl}/revoke-token`, {\n          token: refreshToken\n        }, {\n          withCredentials: true\n        }).subscribe({\n          error: error => {\n            console.error('Error revoking token:', error);\n          }\n        });\n      }\n      // Navigate to login page\n      this.router.navigate(['/account/login']);\n    }\n    // Helper to get refresh token from cookie\n    getRefreshTokenFromCookie() {\n      const match = document.cookie.match(new RegExp('(^| )refreshToken=([^;]+)'));\n      return match ? match[2] : null;\n    }\n    refreshToken() {\n      return this.http.post(`${baseUrl}/refresh-token`, {}, {\n        withCredentials: true\n      }).pipe(map(account => {\n        // Store the account (with jwtToken) in local storage\n        localStorage.setItem('account', JSON.stringify(account));\n        this.accountSubject.next(account);\n        this.startRefreshTokenTimer();\n        return account;\n      }));\n    }\n    register(account) {\n      return this.http.post(`${baseUrl}/register`, account);\n    }\n    verifyEmail(token) {\n      return this.http.post(`${baseUrl}/verify-email`, {\n        token\n      });\n    }\n    forgotPassword(email) {\n      return this.http.post(`${baseUrl}/forgot-password`, {\n        email\n      });\n    }\n    validateResetToken(token) {\n      return this.http.post(`${baseUrl}/validate-reset-token`, {\n        token\n      });\n    }\n    resetPassword(token, password, confirmPassword) {\n      return this.http.post(`${baseUrl}/reset-password`, {\n        token,\n        password,\n        confirmPassword\n      });\n    }\n    getAll() {\n      return this.http.get(baseUrl, {\n        withCredentials: true\n      });\n    }\n    getById(id) {\n      return this.http.get(`${baseUrl}/${id}`, {\n        withCredentials: true\n      });\n    }\n    create(params) {\n      return this.http.post(baseUrl, params, {\n        withCredentials: true\n      });\n    }\n    update(id, params) {\n      return this.http.put(`${baseUrl}/${id}`, params, {\n        withCredentials: true\n      }).pipe(map(account => {\n        // update the current account if it was updated\n        if (account.id === this.accountValue.id) {\n          // publish updated account to subscribers\n          account = {\n            ...this.accountValue,\n            ...account\n          };\n          this.accountSubject.next(account);\n        }\n        return account;\n      }));\n    }\n    delete(id) {\n      return this.http.delete(`${baseUrl}/${id}`, {\n        withCredentials: true\n      }).pipe(finalize(() => {\n        // auto logout if the logged in account was deleted\n        if (id === this.accountValue.id) this.logout();\n      }));\n    }\n    deactivateAccount(id) {\n      return this.http.put(`${baseUrl}/accounts/${id}/deactivate`, {}, {\n        withCredentials: true\n      });\n    }\n    activateAccount(id) {\n      return this.http.put(`${baseUrl}/accounts/${id}/activate`, {}, {\n        withCredentials: true\n      });\n    }\n    // helper methods\n    refreshTokenTimeout;\n    startRefreshTokenTimer() {\n      // parse json object from base64 encoded jwt token\n      const jwtToken = JSON.parse(atob(this.accountValue.jwtToken.split('.')[1]));\n      // set a timeout to refresh the token a minute before it expires\n      const expires = new Date(jwtToken.exp * 1000);\n      const timeout = expires.getTime() - Date.now() - 60 * 1000;\n      this.refreshTokenTimeout = setTimeout(() => {\n        this.refreshToken().subscribe({\n          error: () => {\n            // If refresh token fails, logout\n            this.logout();\n          }\n        });\n      }, timeout);\n    }\n    stopRefreshTokenTimer() {\n      clearTimeout(this.refreshTokenTimeout);\n    }\n    static ɵfac = function AccountService_Factory(t) {\n      return new (t || AccountService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AccountService,\n      factory: AccountService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return AccountService;\n})();","map":{"version":3,"mappings":"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","names":["BehaviorSubject","map","finalize","environment","baseUrl","apiUrl","AccountService","router","http","accountSubject","account","constructor","JSON","parse","localStorage","getItem","asObservable","accountValue","value","login","email","password","post","withCredentials","pipe","setItem","stringify","next","startRefreshTokenTimer","logout","stopRefreshTokenTimer","removeItem","refreshToken","getRefreshTokenFromCookie","token","subscribe","error","console","navigate","match","document","cookie","RegExp","register","verifyEmail","forgotPassword","validateResetToken","resetPassword","confirmPassword","getAll","get","getById","id","create","params","update","put","delete","deactivateAccount","activateAccount","refreshTokenTimeout","jwtToken","atob","split","expires","Date","exp","timeout","getTime","now","setTimeout","clearTimeout","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\CLARKKYYY\\Desktop\\final-project_intprog-main\\frontend\\src\\app\\_services\\account.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { map, finalize } from 'rxjs/operators';\r\n\r\nimport { environment } from '@environments/environment';\r\nimport { Account } from '@app/_models';\r\n\r\nconst baseUrl = `${environment.apiUrl}/accounts`;\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AccountService {\r\n    private accountSubject: BehaviorSubject<Account>;\r\n    public account: Observable<Account>;\r\n\r\n    constructor(\r\n        private router: Router,\r\n        private http: HttpClient\r\n    ) {\r\n        // Load account from local storage if available\r\n        this.accountSubject = new BehaviorSubject<Account>(JSON.parse(localStorage.getItem('account')));\r\n        this.account = this.accountSubject.asObservable();\r\n    }\r\n\r\n    public get accountValue(): Account {\r\n        return this.accountSubject.value;\r\n    }\r\n\r\n    login(email: string, password: string) {\r\n        return this.http.post<any>(`${baseUrl}/authenticate`, { email, password }, { withCredentials: true })\r\n            .pipe(map(account => {\r\n                // Store the account (with jwtToken) in local storage\r\n                localStorage.setItem('account', JSON.stringify(account));\r\n                this.accountSubject.next(account);\r\n                this.startRefreshTokenTimer();\r\n                return account;\r\n            }));\r\n    }\r\n\r\n    logout() {\r\n        // Clean up local state first\r\n        this.stopRefreshTokenTimer();\r\n        this.accountSubject.next(null);\r\n        localStorage.removeItem('account');\r\n\r\n        // Attempt to revoke the token, but don't wait for it\r\n        const refreshToken = this.getRefreshTokenFromCookie();\r\n        if (refreshToken) {\r\n            this.http.post<any>(`${baseUrl}/revoke-token`, { token: refreshToken }, { withCredentials: true })\r\n                .subscribe({\r\n                    error: (error) => {\r\n                        console.error('Error revoking token:', error);\r\n                    }\r\n                });\r\n        }\r\n\r\n        // Navigate to login page\r\n        this.router.navigate(['/account/login']);\r\n    }\r\n\r\n    // Helper to get refresh token from cookie\r\n    private getRefreshTokenFromCookie(): string | null {\r\n        const match = document.cookie.match(new RegExp('(^| )refreshToken=([^;]+)'));\r\n        return match ? match[2] : null;\r\n    }\r\n\r\n    refreshToken() {\r\n        return this.http.post<any>(`${baseUrl}/refresh-token`, {}, { withCredentials: true })\r\n            .pipe(map(account => {\r\n                // Store the account (with jwtToken) in local storage\r\n                localStorage.setItem('account', JSON.stringify(account));\r\n                this.accountSubject.next(account);\r\n                this.startRefreshTokenTimer();\r\n                return account;\r\n            }));\r\n    }\r\n\r\n    register(account: Account) {\r\n        return this.http.post(`${baseUrl}/register`, account);\r\n    }\r\n\r\n    verifyEmail(token: string) {\r\n        return this.http.post(`${baseUrl}/verify-email`, { token });\r\n    }\r\n\r\n    forgotPassword(email: string) {\r\n        return this.http.post(`${baseUrl}/forgot-password`, { email });\r\n    }\r\n\r\n    validateResetToken(token: string) {\r\n        return this.http.post(`${baseUrl}/validate-reset-token`, { token });\r\n    }\r\n\r\n    resetPassword(token: string, password: string, confirmPassword: string) {\r\n        return this.http.post(`${baseUrl}/reset-password`, { token, password, confirmPassword });\r\n    }\r\n\r\n    getAll() {\r\n        return this.http.get<Account[]>(baseUrl, { withCredentials: true });\r\n    }\r\n\r\n    getById(id: string) {\r\n        return this.http.get<Account>(`${baseUrl}/${id}`, { withCredentials: true });\r\n    }\r\n\r\n    create(params: any) {\r\n        return this.http.post(baseUrl, params, { withCredentials: true });\r\n    }\r\n\r\n    update(id, params) {\r\n        return this.http.put(`${baseUrl}/${id}`, params, { withCredentials: true })\r\n            .pipe(map((account: any) => {\r\n                // update the current account if it was updated\r\n                if (account.id === this.accountValue.id) {\r\n                    // publish updated account to subscribers\r\n                    account = { ...this.accountValue, ...account };\r\n                    this.accountSubject.next(account);\r\n                }\r\n                return account;\r\n            }));\r\n    }    \r\n\r\n    delete(id: string) {\r\n        return this.http.delete(`${baseUrl}/${id}`, { withCredentials: true })\r\n            .pipe(finalize(() => {\r\n                // auto logout if the logged in account was deleted\r\n                if (id === this.accountValue.id) \r\n                    this.logout();\r\n            }));\r\n    }\r\n\r\n    deactivateAccount(id: number) {\r\n        return this.http.put(`${baseUrl}/accounts/${id}/deactivate`, {}, { withCredentials: true });\r\n    }\r\n    \r\n    activateAccount(id: number) {\r\n        return this.http.put(`${baseUrl}/accounts/${id}/activate`, {}, { withCredentials: true });\r\n    }\r\n      \r\n\r\n    // helper methods\r\n\r\n    private refreshTokenTimeout;\r\n\r\n    private startRefreshTokenTimer() {\r\n        // parse json object from base64 encoded jwt token\r\n        const jwtToken = JSON.parse(atob(this.accountValue.jwtToken.split('.')[1]));\r\n\r\n        // set a timeout to refresh the token a minute before it expires\r\n        const expires = new Date(jwtToken.exp * 1000);\r\n        const timeout = expires.getTime() - Date.now() - (60 * 1000);\r\n        this.refreshTokenTimeout = setTimeout(() => {\r\n            this.refreshToken().subscribe({\r\n                error: () => {\r\n                    // If refresh token fails, logout\r\n                    this.logout();\r\n                }\r\n            });\r\n        }, timeout);\r\n    }\r\n\r\n    private stopRefreshTokenTimer() {\r\n        clearTimeout(this.refreshTokenTimeout);\r\n    }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}